// <auto-generated />
using System;
using HisApiMockService;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace HisApiMockService.Migrations
{
    [DbContext(typeof(SqliteDbContext))]
    partial class SqliteDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.0");

            modelBuilder.Entity("HisApiMockService.Models.Advices.Recordinfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("OperatorDate")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("RecordDetailNo")
                        .HasColumnType("TEXT");

                    b.Property<string>("RecordNo")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("RecordState")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("UpdateRecordStatusRequestId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("UpdateRecordStatusRequestId");

                    b.ToTable("RecordInfo");
                });

            modelBuilder.Entity("HisApiMockService.Models.Advices.UpdateRecordStatusRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("DeptCode")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("OperatorCode")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PatientId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("RecordType")
                        .HasColumnType("INTEGER");

                    b.Property<string>("VisSerialNo")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("RecordStatusRequest");
                });

            modelBuilder.Entity("HisApiMockService.Models.CreatePatientResponseDto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Address")
                        .HasColumnType("TEXT");

                    b.Property<string>("Age")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("Birthday")
                        .HasColumnType("TEXT");

                    b.Property<string>("CardNo")
                        .HasColumnType("TEXT");

                    b.Property<string>("ChargeType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ContactsPhone")
                        .HasColumnType("TEXT");

                    b.Property<string>("Country")
                        .HasColumnType("TEXT");

                    b.Property<string>("CountryCode")
                        .HasColumnType("TEXT");

                    b.Property<string>("ErrorMsg")
                        .HasColumnType("TEXT");

                    b.Property<string>("IdentityNo")
                        .HasColumnType("TEXT");

                    b.Property<string>("Nation")
                        .HasColumnType("TEXT");

                    b.Property<string>("PatientId")
                        .HasColumnType("TEXT");

                    b.Property<string>("PatientName")
                        .HasColumnType("TEXT");

                    b.Property<string>("Py")
                        .HasColumnType("TEXT");

                    b.Property<string>("Sex")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("StartTriageTime")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("BuildPatient");
                });

            modelBuilder.Entity("HisApiMockService.Models.HISMedicine", b =>
                {
                    b.Property<decimal>("InvId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Alias")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("AliasPyCode")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("AliasWbCode")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("AntibioticLevel")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("AntibioticPermission")
                        .HasColumnType("TEXT");

                    b.Property<string>("BaseFlag")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<decimal>("BigPackFactor")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("BigPackPrice")
                        .HasColumnType("TEXT");

                    b.Property<string>("BigPackUnit")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("ChildrenPrice")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("DefaultDosage")
                        .HasColumnType("TEXT");

                    b.Property<string>("DosageForm")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<decimal>("DosageQty")
                        .HasColumnType("TEXT");

                    b.Property<string>("DosageUnit")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<decimal>("EmergencySign")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("ExecDeptCode")
                        .HasColumnType("TEXT");

                    b.Property<string>("ExecDeptName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<decimal>("FactoryCode")
                        .HasColumnType("TEXT");

                    b.Property<string>("FactoryName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("FixPrice")
                        .HasColumnType("TEXT");

                    b.Property<string>("FrequencyCode")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("FrequencyName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<decimal>("InsuranceCode")
                        .HasColumnType("TEXT");

                    b.Property<string>("InsuranceName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("InsurancePayRate")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("IsAllergyTest")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("IsAnaleptic")
                        .HasColumnType("INTEGER");

                    b.Property<string>("IsCompound")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("IsDrunk")
                        .HasColumnType("INTEGER");

                    b.Property<int>("IsFirstAid")
                        .HasColumnType("INTEGER");

                    b.Property<string>("IsHighRisk")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("IsInsulin")
                        .HasColumnType("INTEGER");

                    b.Property<string>("IsLimited")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("IsPrecious")
                        .HasColumnType("INTEGER");

                    b.Property<string>("IsRefrigerated")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("IsSkinTest")
                        .HasColumnType("TEXT");

                    b.Property<string>("IsTumour")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("LimitedNote")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("MedicalInsuranceCode")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<decimal>("MedicineCode")
                        .HasColumnType("TEXT");

                    b.Property<string>("MedicineName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<decimal>("MedicineProperty")
                        .HasColumnType("TEXT");

                    b.Property<string>("PharmacyCode")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PharmacyName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("PlatformType")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("PrescriptionPermission")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Price")
                        .HasColumnType("TEXT");

                    b.Property<string>("PyCode")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("Qty")
                        .HasColumnType("TEXT");

                    b.Property<string>("Remark")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("RetPrice")
                        .HasColumnType("TEXT");

                    b.Property<string>("ScientificName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<decimal>("SmallPackFactor")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("SmallPackPrice")
                        .HasColumnType("TEXT");

                    b.Property<string>("SmallPackUnit")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Specification")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("ToxicLevel")
                        .HasColumnType("TEXT");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Unpack")
                        .HasColumnType("INTEGER");

                    b.Property<decimal?>("UsageCode")
                        .HasColumnType("TEXT");

                    b.Property<string>("UsageName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Volume")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("VolumeUnit")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("WbCode")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("Weight")
                        .HasColumnType("TEXT");

                    b.Property<string>("WeightUnit")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("InvId");

                    b.ToTable("HISMedicines");
                });

            modelBuilder.Entity("HisApiMockService.Models.Medicals.ChargeDetailRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ChargeDetailNo")
                        .HasColumnType("TEXT");

                    b.Property<string>("DailyFrequency")
                        .HasColumnType("TEXT");

                    b.Property<string>("DrugChannel")
                        .HasColumnType("TEXT");

                    b.Property<string>("DrugCode")
                        .HasColumnType("TEXT");

                    b.Property<string>("DrugGroupNo")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("DrugPrice")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("DrugQuantity")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("DrugTotamount")
                        .HasColumnType("TEXT");

                    b.Property<string>("DrugUsageDic")
                        .HasColumnType("TEXT");

                    b.Property<string>("FirmID")
                        .HasColumnType("TEXT");

                    b.Property<string>("PackageAmount")
                        .HasColumnType("TEXT");

                    b.Property<string>("PharSpec")
                        .HasColumnType("TEXT");

                    b.Property<string>("PharmUnit")
                        .HasColumnType("TEXT");

                    b.Property<string>("PrimaryDose")
                        .HasColumnType("TEXT");

                    b.Property<string>("Remarks")
                        .HasColumnType("TEXT");

                    b.Property<int>("RestrictedDrugs")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SkinTest")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("ChargeDetail");
                });

            modelBuilder.Entity("HisApiMockService.Models.Medicals.DrugItemRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AgencyPeopleAge")
                        .HasColumnType("INTEGER");

                    b.Property<string>("AgencyPeopleCard")
                        .HasColumnType("TEXT");

                    b.Property<string>("AgencyPeopleMobile")
                        .HasColumnType("TEXT");

                    b.Property<string>("AgencyPeopleName")
                        .HasColumnType("TEXT");

                    b.Property<int>("AgencyPeopleSex")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ChargeDetailId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("DrugAdministration")
                        .HasColumnType("INTEGER");

                    b.Property<int>("DrugDecoct")
                        .HasColumnType("INTEGER");

                    b.Property<int>("DrugType")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PrescriptionDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("PrescriptionDays")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PrescriptionNo")
                        .HasColumnType("TEXT");

                    b.Property<int>("PrescriptionType")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("SendMedicalInfoRequestId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Storage")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ChargeDetailId");

                    b.HasIndex("SendMedicalInfoRequestId");

                    b.ToTable("DrugItem");
                });

            modelBuilder.Entity("HisApiMockService.Models.Medicals.ProjectDetailRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("GroupsId")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProjectDetailNo")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProjectMain")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProjectMerge")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProjectName")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("ProjectPrice")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("ProjectQuantity")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("ProjectTotamount")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProjectType")
                        .HasColumnType("TEXT");

                    b.Property<string>("Remarks")
                        .HasColumnType("TEXT");

                    b.Property<int>("RestrictedDrugs")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("ProjectDetail");
                });

            modelBuilder.Entity("HisApiMockService.Models.Medicals.ProjectItemRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("EmergencySign")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ExecuteDeptCode")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("GroupId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("GroupType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("ProjectDetailId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ProjectItemNo")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("SendMedicalInfoRequestId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ProjectDetailId");

                    b.HasIndex("SendMedicalInfoRequestId");

                    b.ToTable("ProjectItem");
                });

            modelBuilder.Entity("HisApiMockService.Models.Medicals.QueryMedicalInfoResponse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("BillState")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ChannelBillId")
                        .HasColumnType("TEXT");

                    b.Property<string>("DeptCode")
                        .HasColumnType("TEXT");

                    b.Property<string>("DoctorCode")
                        .HasColumnType("TEXT");

                    b.Property<string>("HisBillId")
                        .HasColumnType("TEXT");

                    b.Property<string>("PatientName")
                        .HasColumnType("TEXT");

                    b.Property<string>("VisSerialNo")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("MedicalInfoStatus");
                });

            modelBuilder.Entity("HisApiMockService.Models.Medicals.SendMedicalInfoRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("DeptCode")
                        .HasColumnType("TEXT");

                    b.Property<string>("DoctorCode")
                        .HasColumnType("TEXT");

                    b.Property<string>("DoctorName")
                        .HasColumnType("TEXT");

                    b.Property<string>("PatientId")
                        .HasColumnType("TEXT");

                    b.Property<string>("VisSerialNo")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("SendMedicalInfo");
                });

            modelBuilder.Entity("HisApiMockService.Models.PatientDto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AlternateVisitId")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("AppointmentId")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("Birthday")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("CardNo")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("CardType")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("ContactName")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("ContactPhone")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("DeptId")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("DoctorCode")
                        .HasColumnType("TEXT");

                    b.Property<string>("EthnicGroup")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("HomeAddress")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("IdCard")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("IdentifyNO")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("IsCancel")
                        .HasColumnType("TEXT");

                    b.Property<string>("Job")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("MaritalStatus")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("Nationaddress")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Nationality")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("OfficeAddress")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Operator")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("PatientClass")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("PatientId")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("PatientName")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("PatientNo")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumberBus")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumberHome")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("RegisterDate")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("RegisterId")
                        .HasMaxLength(5)
                        .HasColumnType("TEXT");

                    b.Property<string>("RegisterSequence")
                        .HasMaxLength(5)
                        .HasColumnType("TEXT");

                    b.Property<string>("SeeDate")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("Sex")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("Shift")
                        .HasMaxLength(5)
                        .HasColumnType("TEXT");

                    b.Property<string>("SsnNum")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("VisitNo")
                        .HasColumnType("TEXT");

                    b.Property<string>("VisitNum")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("Weight")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("RegisterPatient");
                });

            modelBuilder.Entity("HisApiMockService.Models.Stores.DrugStockQueryResponse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Dosage")
                        .HasColumnType("INTEGER");

                    b.Property<string>("DosageUnit")
                        .HasColumnType("TEXT");

                    b.Property<string>("DrugCode")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("DrugDose")
                        .HasColumnType("TEXT");

                    b.Property<string>("DrugName")
                        .HasColumnType("TEXT");

                    b.Property<string>("DrugSpec")
                        .HasColumnType("TEXT");

                    b.Property<string>("DrugUnit")
                        .HasColumnType("TEXT");

                    b.Property<string>("FirmID")
                        .HasColumnType("TEXT");

                    b.Property<int>("MinPackageIndicator")
                        .HasColumnType("INTEGER");

                    b.Property<string>("MinPackageUnit")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("PackageAmount")
                        .HasColumnType("TEXT");

                    b.Property<string>("PharSpec")
                        .HasColumnType("TEXT");

                    b.Property<string>("PharmUnit")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("PurchasePrice")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("RetailPrice")
                        .HasColumnType("TEXT");

                    b.Property<string>("ReturnDesc")
                        .HasColumnType("TEXT");

                    b.Property<int>("Storage")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("DrugStock");
                });

            modelBuilder.Entity("HisApiMockService.Models.Advices.Recordinfo", b =>
                {
                    b.HasOne("HisApiMockService.Models.Advices.UpdateRecordStatusRequest", null)
                        .WithMany("Recordinfo")
                        .HasForeignKey("UpdateRecordStatusRequestId");
                });

            modelBuilder.Entity("HisApiMockService.Models.Medicals.DrugItemRequest", b =>
                {
                    b.HasOne("HisApiMockService.Models.Medicals.ChargeDetailRequest", "ChargeDetail")
                        .WithMany()
                        .HasForeignKey("ChargeDetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HisApiMockService.Models.Medicals.SendMedicalInfoRequest", null)
                        .WithMany("DrugItem")
                        .HasForeignKey("SendMedicalInfoRequestId");

                    b.Navigation("ChargeDetail");
                });

            modelBuilder.Entity("HisApiMockService.Models.Medicals.ProjectItemRequest", b =>
                {
                    b.HasOne("HisApiMockService.Models.Medicals.ProjectDetailRequest", "ProjectDetail")
                        .WithMany()
                        .HasForeignKey("ProjectDetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HisApiMockService.Models.Medicals.SendMedicalInfoRequest", null)
                        .WithMany("ProjectItem")
                        .HasForeignKey("SendMedicalInfoRequestId");

                    b.Navigation("ProjectDetail");
                });

            modelBuilder.Entity("HisApiMockService.Models.Advices.UpdateRecordStatusRequest", b =>
                {
                    b.Navigation("Recordinfo");
                });

            modelBuilder.Entity("HisApiMockService.Models.Medicals.SendMedicalInfoRequest", b =>
                {
                    b.Navigation("DrugItem");

                    b.Navigation("ProjectItem");
                });
#pragma warning restore 612, 618
        }
    }
}
