// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Volo.Abp.EntityFrameworkCore;
using YiJian.EMR.EntityFrameworkCore;

#nullable disable

namespace YiJian.EMR.Migrations
{
    [DbContext(typeof(EMRHttpApiHostMigrationsDbContext))]
    [Migration("20230514032754_v2.2.8.3-minio-emr-dpf")]
    partial class v2283minioemrdpf
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("_Abp_DatabaseProvider", EfCoreDatabaseProvider.SqlServer)
                .HasAnnotation("ProductVersion", "6.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("YiJian.EMR.ApplicationSettings.Entities.AppSetting", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasComment("配置值");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("配置名称");

                    b.HasKey("Id");

                    b.ToTable("EmrAppSetting", (string)null);

                    b.HasComment("应用配置");
                });

            modelBuilder.Entity("YiJian.EMR.Characters.Entities.UniversalCharacter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Category")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("分类");

                    b.Property<int>("Sort")
                        .HasColumnType("int")
                        .HasComment("排序");

                    b.HasKey("Id");

                    b.ToTable("EmrUniversalCharacter", (string)null);

                    b.HasComment("通用字符");
                });

            modelBuilder.Entity("YiJian.EMR.Characters.Entities.UniversalCharacterNode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Character")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("字符");

                    b.Property<int>("Sort")
                        .HasColumnType("int")
                        .HasComment("排序");

                    b.Property<int>("UniversalCharacterId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UniversalCharacterId");

                    b.ToTable("EmrUniversalCharacterNode", (string)null);
                });

            modelBuilder.Entity("YiJian.EMR.CloudSign.Entities.CloudSignInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BizId")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("业务系统id");

                    b.Property<string>("BusinessTypeCode")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)")
                        .HasComment("深圳市CA业务类型编码");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)")
                        .HasColumnName("ConcurrencyStamp");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreationTime");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CreatorId");

                    b.Property<Guid>("EMRId")
                        .HasMaxLength(32)
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("EventMsg")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("状态信息");

                    b.Property<string>("ExtraProperties")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ExtraProperties");

                    b.Property<string>("PatientId")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("病人Id");

                    b.Property<string>("SignedData")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("签名值");

                    b.Property<int>("StatusCode")
                        .HasColumnType("int")
                        .HasComment("云签结果状态码");

                    b.Property<string>("Timestamp")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("时间戳签名值");

                    b.Property<bool>("WithTsa")
                        .HasColumnType("bit")
                        .HasComment("是否进行时间戳签名");

                    b.HasKey("Id");

                    b.ToTable("EmrCloudSignInfo", (string)null);
                });

            modelBuilder.Entity("YiJian.EMR.DailyExpressions.Entities.Phrase", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CatalogueId")
                        .HasColumnType("int")
                        .HasComment("目录Id");

                    b.Property<int>("Sort")
                        .HasColumnType("int")
                        .HasComment("排序号码");

                    b.Property<string>("Text")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)")
                        .HasComment("内容");

                    b.Property<string>("Title")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasComment("标题");

                    b.HasKey("Id");

                    b.HasIndex("CatalogueId");

                    b.ToTable("EmrPhrase", (string)null);

                    b.HasComment("病历常用语");
                });

            modelBuilder.Entity("YiJian.EMR.DailyExpressions.Entities.PhraseCatalogue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Belonger")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("归属人 如果 TemplateType=2 归属者为医生Id doctorId, 如果 TemplateType=1 归属者为科室id deptid , 如果 TemplateType=0 归属者为hospital");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)")
                        .HasColumnName("ConcurrencyStamp");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreationTime");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CreatorId");

                    b.Property<Guid?>("DeleterId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("DeleterId");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("DeletionTime");

                    b.Property<string>("ExtraProperties")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ExtraProperties");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("LastModificationTime");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("LastModifierId");

                    b.Property<int>("Sort")
                        .HasColumnType("int")
                        .HasComment("排序号码");

                    b.Property<int>("TemplateType")
                        .HasColumnType("int")
                        .HasComment("模板类型，0=通用(全院)，1=科室，2=个人");

                    b.Property<string>("Title")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasComment("目录标题");

                    b.HasKey("Id");

                    b.ToTable("EmrPhraseCatalogue", (string)null);

                    b.HasComment("常用语目录");
                });

            modelBuilder.Entity("YiJian.EMR.DataBinds.Entities.DataBindContext", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Classify")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0)
                        .HasComment("电子文书分类（0=电子病历，1=文书）");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)")
                        .HasColumnName("ConcurrencyStamp");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreationTime");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CreatorId");

                    b.Property<Guid?>("DeleterId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("DeleterId");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("DeletionTime");

                    b.Property<string>("ExtraProperties")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ExtraProperties");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("LastModificationTime");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("LastModifierId");

                    b.Property<string>("OrgCode")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasDefaultValue("")
                        .HasComment("机构ID");

                    b.Property<Guid>("PI_ID")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("患者唯一Id");

                    b.Property<Guid>("PatientEmrId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("患者电子病历Id");

                    b.Property<string>("PatientId")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)")
                        .HasComment("患者Id");

                    b.Property<string>("PatientName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("患者名称");

                    b.Property<string>("RegisterSerialNo")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)")
                        .HasDefaultValue("")
                        .HasComment("流水号");

                    b.Property<string>("VisitNo")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)")
                        .HasDefaultValue("")
                        .HasComment("就诊号");

                    b.Property<string>("WriterId")
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)")
                        .HasComment("录入人Id");

                    b.Property<string>("WriterName")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasComment("录入人名称");

                    b.HasKey("Id");

                    b.HasIndex("PI_ID");

                    b.HasIndex("PatientEmrId");

                    b.ToTable("EmrDataBindContext", (string)null);

                    b.HasComment("电子病历、文书绑定的数据上下文");
                });

            modelBuilder.Entity("YiJian.EMR.DataBinds.Entities.DataBindMap", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DataBindContextId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("数据上下文Id");

                    b.Property<string>("DataSource")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("数据分类");

                    b.Property<string>("Path")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("绑定的数据名称");

                    b.Property<string>("Value")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)")
                        .HasComment("绑定的数据");

                    b.HasKey("Id");

                    b.HasIndex("DataBindContextId");

                    b.ToTable("EmrDataBindMap", (string)null);

                    b.HasComment("数据绑定字典");
                });

            modelBuilder.Entity("YiJian.EMR.DataElements.Entities.DataElement", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)")
                        .HasColumnName("ConcurrencyStamp");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreationTime");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CreatorId");

                    b.Property<Guid?>("DeleterId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("DeleterId");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("DeletionTime");

                    b.Property<string>("ExtraProperties")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ExtraProperties");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("IsDeleted");

                    b.Property<bool>("IsElement")
                        .HasColumnType("bit")
                        .HasComment("是否是元素");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("LastModificationTime");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("LastModifierId");

                    b.Property<int>("Lv")
                        .HasColumnType("int")
                        .HasComment("层级，默认=0");

                    b.Property<Guid>("Parent")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("父级级联Id");

                    b.Property<string>("Title")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("名称标题");

                    b.HasKey("Id");

                    b.ToTable("EmrDataElement", (string)null);

                    b.HasComment("数据元集合根");
                });

            modelBuilder.Entity("YiJian.EMR.DataElements.Entities.DataElementDropdown", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)")
                        .HasColumnName("ConcurrencyStamp");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreationTime");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CreatorId");

                    b.Property<Guid>("DataElementItemId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("元素项Id");

                    b.Property<string>("DataSource")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("来源");

                    b.Property<Guid?>("DeleterId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("DeleterId");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("DeletionTime");

                    b.Property<string>("ExtraProperties")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ExtraProperties");

                    b.Property<bool>("IsAllowMultiple")
                        .HasColumnType("bit")
                        .HasComment("允许多选");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("IsDeleted");

                    b.Property<bool>("IsDynamicallyLoad")
                        .HasColumnType("bit")
                        .HasComment("动态加载下拉列表");

                    b.Property<bool>("IsSortByTime")
                        .HasColumnType("bit")
                        .HasComment("数值勾选按照时间排序");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("LastModificationTime");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("LastModifierId");

                    b.HasKey("Id");

                    b.HasIndex("DataElementItemId");

                    b.ToTable("EmrDataElementDropdown", (string)null);

                    b.HasComment("输入域类型下拉项目");
                });

            modelBuilder.Entity("YiJian.EMR.DataElements.Entities.DataElementDropdownItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DataElementDropdownId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("输入域类型下拉项目Id");

                    b.Property<string>("GroupName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("分组名称");

                    b.Property<string>("ListText")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("指定的列表文本");

                    b.Property<string>("Text")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("文本");

                    b.Property<string>("Value")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("数值");

                    b.HasKey("Id");

                    b.HasIndex("DataElementDropdownId");

                    b.ToTable("EmrDataElementDropdownItem", (string)null);

                    b.HasComment("元素下拉项");
                });

            modelBuilder.Entity("YiJian.EMR.DataElements.Entities.DataElementItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BeginMargin")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("起始边框");

                    b.Property<string>("BindPath")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("绑定路径");

                    b.Property<bool>("CanDelete")
                        .HasColumnType("bit")
                        .HasComment("允许被删除");

                    b.Property<bool>("CanModify")
                        .HasColumnType("bit")
                        .HasComment("用户可以直接修改内容");

                    b.Property<string>("CascadeExpression")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("级联表达式");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)")
                        .HasColumnName("ConcurrencyStamp");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreationTime");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CreatorId");

                    b.Property<Guid>("DataElementId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("数据元Id");

                    b.Property<string>("DataSource")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("数据源");

                    b.Property<Guid?>("DeleterId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("DeleterId");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("DeletionTime");

                    b.Property<string>("EndMargin")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("结尾边框");

                    b.Property<string>("ExtraProperties")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ExtraProperties");

                    b.Property<int>("FixedWidth")
                        .HasColumnType("int")
                        .HasComment("固定宽度");

                    b.Property<string>("InputType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("输入域类型");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("IsDeleted");

                    b.Property<bool>("IsReadOnly")
                        .HasColumnType("bit")
                        .HasComment("只读状态");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("LastModificationTime");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("LastModifierId");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("名称");

                    b.Property<bool>("NeedVerification")
                        .HasColumnType("bit")
                        .HasComment("是否开启校验");

                    b.Property<string>("No")
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)")
                        .HasComment("编号");

                    b.Property<string>("NumericalExpression")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("数值表达式");

                    b.Property<string>("Tips")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("提示文本");

                    b.Property<string>("VerificationExpression")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasComment("校验表达式");

                    b.Property<string>("Watermark")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("背景文本");

                    b.HasKey("Id");

                    b.HasIndex("DataElementId");

                    b.ToTable("EmrDataElementItem", (string)null);

                    b.HasComment("数据元素");
                });

            modelBuilder.Entity("YiJian.EMR.EmrPermissions.Entities.OperatingAccount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("DeptCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("科室编码");

                    b.Property<string>("DeptName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("科室名称");

                    b.Property<string>("DoctorCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("医生编码");

                    b.Property<string>("DoctorName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("医生");

                    b.Property<int>("PermissionId")
                        .HasColumnType("int")
                        .HasComment("权限Id");

                    b.HasKey("Id");

                    b.HasIndex("PermissionId");

                    b.ToTable("EmrOperatingAccount", (string)null);

                    b.HasComment("操作账号信息");
                });

            modelBuilder.Entity("YiJian.EMR.EmrPermissions.Entities.Permission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)")
                        .HasColumnName("ConcurrencyStamp");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreationTime");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CreatorId");

                    b.Property<Guid?>("DeleterId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("DeleterId");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("DeletionTime");

                    b.Property<string>("ExtraProperties")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ExtraProperties");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("LastModificationTime");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("LastModifierId");

                    b.Property<string>("Module")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("模块");

                    b.Property<int>("PermissionCode")
                        .HasColumnType("int")
                        .HasComment("权限代码");

                    b.Property<string>("PermissionTitle")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("权限");

                    b.Property<string>("Remark")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasComment("描述");

                    b.HasKey("Id");

                    b.ToTable("EmrPermission", (string)null);

                    b.HasComment("EMR权限管理模型");
                });

            modelBuilder.Entity("YiJian.EMR.Libs.Entities.Catalogue", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Classify")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0)
                        .HasComment("电子文书分类(0=电子病历,1=文书)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)")
                        .HasColumnName("ConcurrencyStamp");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreationTime");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CreatorId");

                    b.Property<Guid?>("DeleterId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("DeleterId");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("DeletionTime");

                    b.Property<string>("ExtraProperties")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ExtraProperties");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("IsDeleted");

                    b.Property<bool>("IsFile")
                        .HasColumnType("bit")
                        .HasComment("是否是文件（文件夹=false,文件=true）");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("LastModificationTime");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("LastModifierId");

                    b.Property<int>("Lv")
                        .HasColumnType("int")
                        .HasComment("目录结构层级Level");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("父级Id，根级=0");

                    b.Property<int>("Sort")
                        .HasColumnType("int")
                        .HasComment("排序权重");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasComment("目录名称");

                    b.HasKey("Id");

                    b.HasIndex("Title");

                    b.ToTable("EmrCatalogue", (string)null);

                    b.HasComment("电子病历库目录树");
                });

            modelBuilder.Entity("YiJian.EMR.Libs.Entities.XmlTemplate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CatalogueId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("目录结构树模板Id");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("IsDeleted");

                    b.Property<string>("TemplateXml")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("xml模板");

                    b.HasKey("Id");

                    b.HasIndex("CatalogueId");

                    b.ToTable("EmrXmlTemplate", (string)null);

                    b.HasComment("xml病历模板");
                });

            modelBuilder.Entity("YiJian.EMR.Props.Entities.CategoryProperty", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Label")
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)")
                        .HasComment("属性标签");

                    b.Property<int>("Lv")
                        .HasColumnType("int")
                        .HasComment("属性层级");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("级联父节点Id");

                    b.Property<string>("Value")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("属性值");

                    b.HasKey("Id");

                    b.ToTable("EmrCategoryProperty", (string)null);

                    b.HasComment("电子病历属性");
                });

            modelBuilder.Entity("YiJian.EMR.Templates.Entities.Department", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DeptCode")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)")
                        .HasComment("科室名称");

                    b.Property<string>("DeptName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("科室名称");

                    b.HasKey("Id");

                    b.ToTable("EmrDepartment", (string)null);

                    b.HasComment("科室历史记录");
                });

            modelBuilder.Entity("YiJian.EMR.Templates.Entities.InpatientWard", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("WardName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("病区名称");

                    b.HasKey("Id");

                    b.ToTable("EmrInpatientWard", (string)null);

                    b.HasComment("病区");
                });

            modelBuilder.Entity("YiJian.EMR.Templates.Entities.MergeTemplateWhiteList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<Guid>("TemplateId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("模板ID");

                    b.Property<string>("TemplateName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("模板名称");

                    b.HasKey("Id");

                    b.ToTable("EmrMergeTemplateWhiteList", (string)null);

                    b.HasComment("合并病历的白名单");
                });

            modelBuilder.Entity("YiJian.EMR.Templates.Entities.MyXmlTemplate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TemplateCatalogueId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("目录结构树模板Id");

                    b.Property<string>("TemplateXml")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("xml模板");

                    b.HasKey("Id");

                    b.HasIndex("TemplateCatalogueId");

                    b.ToTable("EmrMyXmlTemplate", (string)null);

                    b.HasComment("被管理起来的XML电子病例模板(通用模板，科室模板，个人模板)");
                });

            modelBuilder.Entity("YiJian.EMR.Templates.Entities.TemplateCatalogue", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CatalogueId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("引用的模板Id");

                    b.Property<string>("CatalogueTitle")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasComment("最初引入病历库的名称");

                    b.Property<int>("Classify")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0)
                        .HasComment("电子文书分类(0=电子病历,1=文书)");

                    b.Property<string>("Code")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasComment("目录名称编码");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)")
                        .HasColumnName("ConcurrencyStamp");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreationTime");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CreatorId");

                    b.Property<Guid?>("DeleterId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("DeleterId");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("DeletionTime");

                    b.Property<string>("DeptCode")
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)")
                        .HasComment("科室编码");

                    b.Property<string>("DoctorCode")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)")
                        .HasDefaultValue("")
                        .HasComment("医生编码");

                    b.Property<string>("DoctorName")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasDefaultValue("")
                        .HasComment("医生");

                    b.Property<string>("ExtraProperties")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ExtraProperties");

                    b.Property<Guid?>("InpatientWardId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("病区id");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("IsDeleted");

                    b.Property<bool>("IsEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasComment("是否启用");

                    b.Property<bool>("IsFile")
                        .HasColumnType("bit")
                        .HasComment("是否是文件（文件夹=false,文件=true）");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("LastModificationTime");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("LastModifierId");

                    b.Property<int>("Lv")
                        .HasColumnType("int")
                        .HasComment("目录结构层级Level");

                    b.Property<Guid?>("OriginId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("最初引入病历库的Id");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("父级Id，根级=0");

                    b.Property<int>("Sort")
                        .HasColumnType("int")
                        .HasComment("排序权重");

                    b.Property<int>("TemplateType")
                        .HasColumnType("int")
                        .HasComment("模板类型");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasComment("目录名称");

                    b.HasKey("Id");

                    b.HasIndex("DeptCode");

                    b.HasIndex("DoctorCode");

                    b.HasIndex("Lv");

                    b.HasIndex("Title");

                    b.ToTable("EmrTemplateCatalogue", (string)null);

                    b.HasComment("模板目录结构");
                });

            modelBuilder.Entity("YiJian.EMR.Templates.Entities.ViewVisitSerialEmr", b =>
                {
                    b.Property<string>("DoctorName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("接诊医生名称");

                    b.Property<string>("EmrTitle")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasComment("病历标题");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("病历Id");

                    b.Property<string>("PatientName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("就诊患者名称");

                    b.Property<string>("VisSerialNo")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("就诊流水号");

                    b.ToView("v_visitSerial_emrs");

                    b.HasComment("就诊流水号对应的病历信息");
                });

            modelBuilder.Entity("YiJian.EMR.Writes.Entities.EmrBaseInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AllergySign")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)")
                        .HasComment("药物过敏史");

                    b.Property<string>("AuxiliaryExamination")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)")
                        .HasComment("辅助检查");

                    b.Property<string>("BodyExam")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)")
                        .HasComment("体格体查");

                    b.Property<string>("Channel")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasDefaultValue("SZKJ")
                        .HasComment("渠道来源,尚哲：SZKJ");

                    b.Property<string>("ChiefComplaint")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)")
                        .HasComment("主诉");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)")
                        .HasColumnName("ConcurrencyStamp");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreationTime");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CreatorId");

                    b.Property<Guid?>("DeleterId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("DeleterId");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("DeletionTime");

                    b.Property<string>("DeptCode")
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)")
                        .HasComment("书写科室:一级科室代码");

                    b.Property<string>("DoctorCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("书写医生:书写医生工号");

                    b.Property<string>("ExtraProperties")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ExtraProperties");

                    b.Property<string>("HandlingOpinions")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)")
                        .HasComment("处理意见");

                    b.Property<string>("HistoryPresentIllness")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)")
                        .HasComment("现病史");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("LastModificationTime");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("LastModifierId");

                    b.Property<string>("MedicalHistory")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)")
                        .HasComment("既往史");

                    b.Property<string>("OrgCode")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)")
                        .HasDefaultValue("H7110")
                        .HasComment("机构ID,固定：H7110");

                    b.Property<string>("OutpatientSurgery")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)")
                        .HasComment("门诊手术");

                    b.Property<string>("PatientId")
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)")
                        .HasComment("病人ID:His内部识别id");

                    b.Property<string>("PreliminaryDiagnosis")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)")
                        .HasComment("初步诊断");

                    b.Property<string>("RegisterNo")
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)")
                        .HasComment("挂号识别号");

                    b.Property<string>("VisitNo")
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)")
                        .HasComment("就诊号");

                    b.HasKey("Id");

                    b.ToTable("EmrEmrBaseInfo", (string)null);

                    b.HasComment("电子病例采集的基础信息");
                });

            modelBuilder.Entity("YiJian.EMR.Writes.Entities.MinioEmrInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)")
                        .HasColumnName("ConcurrencyStamp");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreationTime");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CreatorId");

                    b.Property<Guid?>("DeleterId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("DeleterId");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("DeletionTime");

                    b.Property<string>("DoctorCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("医生编号");

                    b.Property<string>("DoctorName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("医生名称");

                    b.Property<string>("EmrTitle")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasComment("病历名称");

                    b.Property<string>("ExtraProperties")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ExtraProperties");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("LastModificationTime");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("LastModifierId");

                    b.Property<string>("MinioUrl")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<Guid>("PI_ID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PatientEmrId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PatientName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("患者名称");

                    b.Property<string>("PatientNo")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("患者编号");

                    b.HasKey("Id");

                    b.HasIndex("PatientEmrId");

                    b.ToTable("EmrMinioEmrInfo", (string)null);

                    b.HasComment("Minio对象存储采集表");
                });

            modelBuilder.Entity("YiJian.EMR.Writes.Entities.PatientEmr", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("AdmissionTime")
                        .HasColumnType("datetime2")
                        .HasComment("入院时间");

                    b.Property<string>("CategoryLv1")
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)")
                        .HasComment("一级分类");

                    b.Property<string>("CategoryLv2")
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)")
                        .HasComment("二级分类");

                    b.Property<int>("Classify")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0)
                        .HasComment("电子文书分类（0=电子病历，1=文书）");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)")
                        .HasColumnName("ConcurrencyStamp");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreationTime");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CreatorId");

                    b.Property<Guid?>("DeleterId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("DeleterId");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("DeletionTime");

                    b.Property<string>("DeptCode")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.Property<string>("DeptName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("DischargeTime")
                        .HasColumnType("datetime2")
                        .HasComment("出院时间");

                    b.Property<string>("DoctorCode")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)")
                        .HasComment("医生编号");

                    b.Property<string>("DoctorName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("医生名称");

                    b.Property<string>("EmrTitle")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasComment("病历名称");

                    b.Property<string>("ExtraProperties")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ExtraProperties");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("bit")
                        .HasComment("是否已归档，默认false=未归档");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("LastModificationTime");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("LastModifierId");

                    b.Property<Guid?>("OriginId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("最初引入病历库的Id");

                    b.Property<Guid>("OriginalId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("原电子病历模板Id（上一级）");

                    b.Property<Guid>("PI_ID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PatientName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("患者名称");

                    b.Property<string>("PatientNo")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)")
                        .HasComment("患者编号");

                    b.HasKey("Id");

                    b.HasIndex("DoctorCode");

                    b.ToTable("EmrPatientEmr", (string)null);

                    b.HasComment("患者电子病历/文书...");
                });

            modelBuilder.Entity("YiJian.EMR.Writes.Entities.PatientEmrXml", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)")
                        .HasColumnName("ConcurrencyStamp");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreationTime");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CreatorId");

                    b.Property<Guid?>("DeleterId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("DeleterId");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("DeletionTime");

                    b.Property<string>("EmrXml")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("电子病历Xml文档");

                    b.Property<string>("ExtraProperties")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ExtraProperties");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("LastModificationTime");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("LastModifierId");

                    b.Property<Guid>("PatientEmrId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("患者电子病历Id");

                    b.HasKey("Id");

                    b.HasIndex("PatientEmrId");

                    b.ToTable("EmrPatientEmrXml", (string)null);

                    b.HasComment("患者的电子病历xml文档");
                });

            modelBuilder.Entity("YiJian.EMR.XmlHistories.Entities.XmlHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)")
                        .HasColumnName("ConcurrencyStamp");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreationTime");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CreatorId");

                    b.Property<Guid?>("DeleterId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("DeleterId");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("DeletionTime");

                    b.Property<string>("DoctorCode")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)")
                        .HasComment("医生编号");

                    b.Property<string>("DoctorName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("医生名称");

                    b.Property<string>("EmrXml")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExtraProperties")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ExtraProperties");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("LastModificationTime");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("LastModifierId");

                    b.Property<int>("XmlCategory")
                        .HasColumnType("int");

                    b.Property<Guid>("XmlId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("XmlCategory");

                    b.HasIndex("XmlId");

                    b.ToTable("EmrXmlHistory", (string)null);

                    b.HasComment("电子病历留痕实体");
                });

            modelBuilder.Entity("YiJian.EMR.Characters.Entities.UniversalCharacterNode", b =>
                {
                    b.HasOne("YiJian.EMR.Characters.Entities.UniversalCharacter", "UniversalCharacter")
                        .WithMany("Nodes")
                        .HasForeignKey("UniversalCharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UniversalCharacter");
                });

            modelBuilder.Entity("YiJian.EMR.DailyExpressions.Entities.Phrase", b =>
                {
                    b.HasOne("YiJian.EMR.DailyExpressions.Entities.PhraseCatalogue", "Catalogue")
                        .WithMany("Phrases")
                        .HasForeignKey("CatalogueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Catalogue");
                });

            modelBuilder.Entity("YiJian.EMR.DataBinds.Entities.DataBindContext", b =>
                {
                    b.HasOne("YiJian.EMR.Writes.Entities.PatientEmr", "PatientEmr")
                        .WithMany()
                        .HasForeignKey("PatientEmrId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PatientEmr");
                });

            modelBuilder.Entity("YiJian.EMR.DataBinds.Entities.DataBindMap", b =>
                {
                    b.HasOne("YiJian.EMR.DataBinds.Entities.DataBindContext", "DataBindContext")
                        .WithMany("DataBindMaps")
                        .HasForeignKey("DataBindContextId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DataBindContext");
                });

            modelBuilder.Entity("YiJian.EMR.EmrPermissions.Entities.OperatingAccount", b =>
                {
                    b.HasOne("YiJian.EMR.EmrPermissions.Entities.Permission", "Permission")
                        .WithMany("OperatingAccounts")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Permission");
                });

            modelBuilder.Entity("YiJian.EMR.Libs.Entities.XmlTemplate", b =>
                {
                    b.HasOne("YiJian.EMR.Libs.Entities.Catalogue", "Catalogue")
                        .WithMany()
                        .HasForeignKey("CatalogueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Catalogue");
                });

            modelBuilder.Entity("YiJian.EMR.Templates.Entities.MyXmlTemplate", b =>
                {
                    b.HasOne("YiJian.EMR.Templates.Entities.TemplateCatalogue", "TemplateCatalogue")
                        .WithMany()
                        .HasForeignKey("TemplateCatalogueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TemplateCatalogue");
                });

            modelBuilder.Entity("YiJian.EMR.Writes.Entities.PatientEmrXml", b =>
                {
                    b.HasOne("YiJian.EMR.Writes.Entities.PatientEmr", "PatientEmr")
                        .WithMany()
                        .HasForeignKey("PatientEmrId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PatientEmr");
                });

            modelBuilder.Entity("YiJian.EMR.Characters.Entities.UniversalCharacter", b =>
                {
                    b.Navigation("Nodes");
                });

            modelBuilder.Entity("YiJian.EMR.DailyExpressions.Entities.PhraseCatalogue", b =>
                {
                    b.Navigation("Phrases");
                });

            modelBuilder.Entity("YiJian.EMR.DataBinds.Entities.DataBindContext", b =>
                {
                    b.Navigation("DataBindMaps");
                });

            modelBuilder.Entity("YiJian.EMR.EmrPermissions.Entities.Permission", b =>
                {
                    b.Navigation("OperatingAccounts");
                });
#pragma warning restore 612, 618
        }
    }
}
