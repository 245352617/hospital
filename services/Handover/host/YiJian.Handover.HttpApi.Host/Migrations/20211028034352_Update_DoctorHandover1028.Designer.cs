// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Volo.Abp.EntityFrameworkCore;
using YiJian.Handover.EntityFrameworkCore;

namespace YiJian.Handover.Migrations
{
    [DbContext(typeof(HandoverHttpApiHostMigrationsDbContext))]
    [Migration("20211028034352_Update_DoctorHandover1028")]
    partial class Update_DoctorHandover1028
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("_Abp_DatabaseProvider", EfCoreDatabaseProvider.SqlServer)
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.11")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("YiJian.Handover.DoctorHandover", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)")
                        .HasColumnName("ConcurrencyStamp");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreationTime");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CreatorId");

                    b.Property<Guid?>("DeleterId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("DeleterId");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("DeletionTime");

                    b.Property<string>("ExtraProperties")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ExtraProperties");

                    b.Property<string>("HandoverDate")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("交班日期");

                    b.Property<string>("HandoverDoctorCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("交班医生编码");

                    b.Property<string>("HandoverDoctorName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("交班医生名称");

                    b.Property<DateTime>("HandoverTime")
                        .HasColumnType("datetime2")
                        .HasComment("交班时间");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("LastModificationTime");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("LastModifierId");

                    b.Property<string>("OtherMatters")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(max)")
                        .HasComment("其他事项");

                    b.Property<Guid>("ShiftSettingId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("班次id");

                    b.Property<string>("ShiftSettingName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("班次名称");

                    b.HasKey("Id");

                    b.HasIndex("HandoverDate");

                    b.HasIndex("HandoverDoctorCode");

                    b.HasIndex("HandoverTime");

                    b.ToTable("Handover_DoctorHandovers");

                    b
                        .HasComment("医生交接班表");
                });

            modelBuilder.Entity("YiJian.Handover.DoctorPatientStatistic", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Admission")
                        .HasColumnType("int")
                        .HasComment("收住院人数");

                    b.Property<int>("CPR")
                        .HasColumnType("int")
                        .HasComment("心肺复苏人数");

                    b.Property<int>("ClassI")
                        .HasColumnType("int")
                        .HasComment("I级  (病危人数)");

                    b.Property<int>("ClassII")
                        .HasColumnType("int")
                        .HasComment("II级  (病重人数)");

                    b.Property<int>("ClassIII")
                        .HasColumnType("int")
                        .HasComment("III级");

                    b.Property<int>("ClassIV")
                        .HasColumnType("int")
                        .HasComment("IV级");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)")
                        .HasColumnName("ConcurrencyStamp");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreationTime");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CreatorId");

                    b.Property<int>("Death")
                        .HasColumnType("int")
                        .HasComment("死亡人数");

                    b.Property<Guid>("DoctorHandoverId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ExistingDisease")
                        .HasColumnType("int")
                        .HasComment("现有病人数");

                    b.Property<string>("ExtraProperties")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ExtraProperties");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("LastModificationTime");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("LastModifierId");

                    b.Property<int>("OutDept")
                        .HasColumnType("int")
                        .HasComment("出科人数");

                    b.Property<int>("PreOperation")
                        .HasColumnType("int")
                        .HasComment("预术人数");

                    b.Property<int>("Rescue")
                        .HasColumnType("int")
                        .HasComment("抢救人数");

                    b.Property<int>("Total")
                        .HasColumnType("int")
                        .HasComment("接诊总人数");

                    b.Property<int>("Visit")
                        .HasColumnType("int")
                        .HasComment("出诊人数");

                    b.HasKey("Id");

                    b.HasIndex("DoctorHandoverId")
                        .IsUnique();

                    b.ToTable("Handover_DoctorPatientStatistics");

                    b
                        .HasComment("医生患者统计");
                });

            modelBuilder.Entity("YiJian.Handover.DoctorPatients", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Age")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasComment("年龄");

                    b.Property<string>("Bed")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasComment("床号");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)")
                        .HasColumnName("ConcurrencyStamp");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("交班内容");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreationTime");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CreatorId");

                    b.Property<string>("DiagnoseName")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(max)")
                        .HasComment("诊断");

                    b.Property<Guid>("DoctorHandoverId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("医生交班id");

                    b.Property<string>("Emr")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(max)")
                        .HasComment("电子病历");

                    b.Property<string>("ExtraProperties")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ExtraProperties");

                    b.Property<string>("InOutVolume")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(max)")
                        .HasComment("出入量");

                    b.Property<string>("Inspect")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(max)")
                        .HasComment("检查");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("LastModificationTime");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("LastModifierId");

                    b.Property<string>("Medicine")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(max)")
                        .HasComment("药物");

                    b.Property<Guid>("PI_ID")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("triage分诊患者id");

                    b.Property<string>("PatientId")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("患者id");

                    b.Property<string>("PatientName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("患者姓名");

                    b.Property<string>("Sex")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasComment("性别");

                    b.Property<string>("Test")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(max)")
                        .HasComment("检验");

                    b.Property<string>("TriageLevelName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("分诊级别");

                    b.Property<int?>("VisitNo")
                        .HasColumnType("int")
                        .HasComment("就诊号");

                    b.Property<string>("VitalSigns")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(max)")
                        .HasComment("生命体征");

                    b.HasKey("Id");

                    b.HasIndex("DoctorHandoverId");

                    b.ToTable("Handover_DoctorPatients");

                    b
                        .HasComment("医生交班患者");
                });

            modelBuilder.Entity("YiJian.Handover.ShiftHandoverSetting", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CategoryCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasComment("类别编码");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasComment("类别名称");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)")
                        .HasColumnName("ConcurrencyStamp");

                    b.Property<string>("CreationName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreationTime");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CreatorId");

                    b.Property<Guid?>("DeleterId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("DeleterId");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("DeletionTime");

                    b.Property<string>("EndTime")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)")
                        .HasComment("结束时间");

                    b.Property<string>("ExtraProperties")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ExtraProperties");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("IsDeleted");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("bit")
                        .HasComment("是否启用");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("LastModificationTime");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("LastModifierId");

                    b.Property<string>("MatchingColor")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("匹配颜色");

                    b.Property<string>("ModificationName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShiftName")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasComment("班次名称");

                    b.Property<int>("Sort")
                        .HasColumnType("int")
                        .HasComment("排序");

                    b.Property<string>("StartTime")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)")
                        .HasComment("开始时间");

                    b.Property<int>("Type")
                        .HasColumnType("int")
                        .HasComment("类型，医生1，护士0");

                    b.HasKey("Id");

                    b.ToTable("Handover_ShiftHandoverSetting");

                    b
                        .HasComment("交接班配置表");
                });

            modelBuilder.Entity("YiJian.Handover.DoctorPatientStatistic", b =>
                {
                    b.HasOne("YiJian.Handover.DoctorHandover", null)
                        .WithOne("PatientStatistics")
                        .HasForeignKey("YiJian.Handover.DoctorPatientStatistic", "DoctorHandoverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("YiJian.Handover.DoctorPatients", b =>
                {
                    b.HasOne("YiJian.Handover.DoctorHandover", null)
                        .WithMany("DoctorPatients")
                        .HasForeignKey("DoctorHandoverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("YiJian.Handover.DoctorHandover", b =>
                {
                    b.Navigation("DoctorPatients");

                    b.Navigation("PatientStatistics");
                });
#pragma warning restore 612, 618
        }
    }
}
