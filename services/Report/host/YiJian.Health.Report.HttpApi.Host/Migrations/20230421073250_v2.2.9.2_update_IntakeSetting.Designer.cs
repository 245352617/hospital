// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Volo.Abp.EntityFrameworkCore;
using YiJian.Health.Report.EntityFrameworkCore;

#nullable disable

namespace YiJian.Health.Report.Migrations
{
    [DbContext(typeof(ReportHttpApiHostMigrationsDbContext))]
    [Migration("20230421073250_v2.2.9.2_update_IntakeSetting")]
    partial class v2292_update_IntakeSetting
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("_Abp_DatabaseProvider", EfCoreDatabaseProvider.SqlServer)
                .HasAnnotation("ProductVersion", "6.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("YiJian.Health.Report.Domain.PhraseCatalogues.Entities.Phrase", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CatalogueId")
                        .HasColumnType("int")
                        .HasComment("目录Id");

                    b.Property<int>("Sort")
                        .HasColumnType("int")
                        .HasComment("排序号码");

                    b.Property<string>("Text")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)")
                        .HasComment("内容");

                    b.Property<string>("Title")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasComment("标题");

                    b.HasKey("Id");

                    b.HasIndex("CatalogueId");

                    b.ToTable("RpPhrase", (string)null);

                    b.HasComment("病历常用语");
                });

            modelBuilder.Entity("YiJian.Health.Report.Domain.PhraseCatalogues.Entities.PhraseCatalogue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Belonger")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("归属人 如果 TemplateType=2 归属者为医生Id doctorId, 如果 TemplateType=1 归属者为科室id deptid , 如果 TemplateType=0 归属者为hospital");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)")
                        .HasColumnName("ConcurrencyStamp");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreationTime");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CreatorId");

                    b.Property<Guid?>("DeleterId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("DeleterId");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("DeletionTime");

                    b.Property<string>("ExtraProperties")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ExtraProperties");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("LastModificationTime");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("LastModifierId");

                    b.Property<int>("Sort")
                        .HasColumnType("int")
                        .HasComment("排序号码");

                    b.Property<int>("TemplateType")
                        .HasColumnType("int")
                        .HasComment("模板类型，0=通用(全院)，1=科室，2=个人");

                    b.Property<string>("Title")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasComment("目录标题");

                    b.HasKey("Id");

                    b.ToTable("RpPhraseCatalogue", (string)null);

                    b.HasComment("常用语目录");
                });

            modelBuilder.Entity("YiJian.Health.Report.Hospitals.Entities.HospitalInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasComment("医院的地址");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)")
                        .HasColumnName("ConcurrencyStamp");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreationTime");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CreatorId");

                    b.Property<Guid?>("DeleterId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("DeleterId");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("DeletionTime");

                    b.Property<string>("ExtraProperties")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ExtraProperties");

                    b.Property<string>("HospitalLevel")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("医院评级(级别，如：三级甲等)");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("LastModificationTime");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("LastModifierId");

                    b.Property<string>("Logo")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)")
                        .HasComment("医院徽标");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("医院的名称");

                    b.HasKey("Id");

                    b.ToTable("RpHospitalInfo", (string)null);

                    b.HasComment("医院的基础信息");
                });

            modelBuilder.Entity("YiJian.Health.Report.NursingDocuments.DynamicField", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreationTime");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CreatorId");

                    b.Property<Guid?>("DeleterId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("DeleterId");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("DeletionTime");

                    b.Property<Guid?>("Field1")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("保留字段1");

                    b.Property<Guid?>("Field2")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("保留字段2");

                    b.Property<Guid?>("Field3")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("保留字段3");

                    b.Property<Guid?>("Field4")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("保留字段4");

                    b.Property<Guid?>("Field5")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("保留字段5");

                    b.Property<Guid?>("Field6")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("保留字段6");

                    b.Property<Guid?>("Field7")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("保留字段7");

                    b.Property<Guid?>("Field8")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("保留字段8");

                    b.Property<Guid?>("Field9")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("保留字段9");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("LastModificationTime");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("LastModifierId");

                    b.Property<Guid>("NursingDocumentId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("护理单Id(外键)");

                    b.Property<int>("SheetIndex")
                        .HasColumnType("int")
                        .HasComment("护理单记录索引");

                    b.Property<string>("SheetName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("护理单记录名称");

                    b.HasKey("Id");

                    b.HasIndex("NursingDocumentId");

                    b.ToTable("RpDynamicField", (string)null);

                    b.HasComment("动态字段名字描述");
                });

            modelBuilder.Entity("YiJian.Health.Report.NursingDocuments.Entities.Characteristic", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("HeaderId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("表头内容");

                    b.Property<string>("JsonData")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("json结构的数据");

                    b.Property<Guid>("NursingRecordId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("护理记录Id");

                    b.HasKey("Id");

                    b.HasIndex("NursingRecordId");

                    b.ToTable("RpCharacteristic", (string)null);

                    b.HasComment("病人特征记录");
                });

            modelBuilder.Entity("YiJian.Health.Report.NursingDocuments.Entities.CriticalIllness", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Begintime")
                        .HasColumnType("datetime2")
                        .HasComment("危重开始记录时间");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)")
                        .HasColumnName("ConcurrencyStamp");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreationTime");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CreatorId");

                    b.Property<Guid?>("DeleterId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("DeleterId");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("DeletionTime");

                    b.Property<DateTime?>("Endtime")
                        .HasColumnType("datetime2")
                        .HasComment("危重结束时间");

                    b.Property<string>("ExtraProperties")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ExtraProperties");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("LastModificationTime");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("LastModifierId");

                    b.Property<Guid>("NursingDocumentId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("护理记录Id");

                    b.Property<Guid>("PI_ID")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("PI_ID");

                    b.Property<string>("PatientId")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)")
                        .HasComment("患者Id");

                    b.Property<string>("PatientName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("患者名称");

                    b.Property<string>("Remark")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("危重描述");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasComment(" 危重枚举(0 = 病危, 1=病重)");

                    b.HasKey("Id");

                    b.HasIndex("NursingDocumentId");

                    b.ToTable("RpCriticalIllness", (string)null);

                    b.HasComment("危重情况记录");
                });

            modelBuilder.Entity("YiJian.Health.Report.NursingDocuments.Entities.DynamicData", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Header")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("表头[Key]");

                    b.Property<Guid>("NursingDocumentId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("护理单Id");

                    b.Property<Guid>("NursingRecordId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("护理单记录列Id");

                    b.Property<int>("SheetIndex")
                        .HasColumnType("int")
                        .HasComment("新建页索引");

                    b.Property<string>("Text")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("文本数据");

                    b.HasKey("Id");

                    b.HasIndex("Header");

                    b.HasIndex("NursingDocumentId");

                    b.HasIndex("SheetIndex");

                    b.ToTable("RpDynamicData", (string)null);

                    b.HasComment("动态数据字典集合");
                });

            modelBuilder.Entity("YiJian.Health.Report.NursingDocuments.Entities.Intake", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Color")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("颜色");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("内容");

                    b.Property<string>("InputMode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("方式");

                    b.Property<int>("IntakeType")
                        .HasColumnType("int")
                        .HasComment("入量出量类型（0=入量，1=出量）");

                    b.Property<Guid>("NursingRecordId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("护理记录Id");

                    b.Property<string>("Quantity")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("量");

                    b.Property<Guid>("RecipeExecId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Source")
                        .HasColumnType("int")
                        .HasComment("来源");

                    b.Property<string>("Traits")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("性状");

                    b.Property<string>("TraitsCode")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("性状");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("单位");

                    b.Property<string>("UnitCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("单位编码");

                    b.HasKey("Id");

                    b.HasIndex("NursingRecordId");

                    b.ToTable("RpIntake", (string)null);

                    b.HasComment("入量出量");
                });

            modelBuilder.Entity("YiJian.Health.Report.NursingDocuments.Entities.IntakeSetting", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("出入量的代码");

                    b.Property<string>("Color")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasComment("颜色");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)")
                        .HasColumnName("ConcurrencyStamp");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("出入量的名称");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreationTime");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CreatorId");

                    b.Property<Guid?>("DeleterId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("DeleterId");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("DeletionTime");

                    b.Property<string>("ExtraProperties")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ExtraProperties");

                    b.Property<string>("InputMode")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasComment("方式");

                    b.Property<int>("InputType")
                        .HasMaxLength(50)
                        .HasColumnType("int")
                        .HasComment("输入类型");

                    b.Property<int>("IntakeType")
                        .HasColumnType("int")
                        .HasComment("入量出量类型（0=入量，1=出量）");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("IsDeleted");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("bit")
                        .HasComment("是否启用");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("LastModificationTime");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("LastModifierId");

                    b.Property<int>("Sort")
                        .HasColumnType("int")
                        .HasComment("排序");

                    b.Property<string>("Traits")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasComment("性状");

                    b.Property<string>("Unit")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasComment("单位");

                    b.HasKey("Id");

                    b.ToTable("RpIntakeSetting", (string)null);

                    b.HasComment("入量出量配置");
                });

            modelBuilder.Entity("YiJian.Health.Report.NursingDocuments.Entities.IntakeStatistics", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Begintime")
                        .HasColumnType("datetime2")
                        .HasComment("统计开始时间");

                    b.Property<DateTime>("Endtime")
                        .HasColumnType("datetime2")
                        .HasComment("统计结束时间");

                    b.Property<string>("InIntakesTotal")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("入量总量");

                    b.Property<Guid>("NursingDocumentId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("护理记录Id");

                    b.Property<string>("OutIntakesTotal")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("出量总量");

                    b.Property<int?>("SheetIndex")
                        .HasColumnType("int")
                        .HasComment("护理记录单SheetIndex");

                    b.HasKey("Id");

                    b.ToTable("RpIntakeStatistics", (string)null);

                    b.HasComment("入量出量统计");
                });

            modelBuilder.Entity("YiJian.Health.Report.NursingDocuments.Entities.Mmol", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("MealTimeType")
                        .HasColumnType("int")
                        .HasComment("餐前餐后(0=餐前，1=餐后)");

                    b.Property<Guid>("NursingRecordId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("护理记录Id");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("数值");

                    b.HasKey("Id");

                    b.HasIndex("NursingRecordId");

                    b.ToTable("RpMmol", (string)null);

                    b.HasComment("指尖血糖 mmol/L");
                });

            modelBuilder.Entity("YiJian.Health.Report.NursingDocuments.Entities.Pupil", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Diameter")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasComment("直径（mm）");

                    b.Property<string>("LightReaction")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("对光反应（灵敏（+）/迟钝（-）/固定（±））");

                    b.Property<Guid>("NursingRecordId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("护理记录Id");

                    b.Property<string>("Other")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("其他");

                    b.Property<string>("OtherTrait")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("其他特征（眼疾/义眼/缺失/破裂/肿胀/包扎/其他...）");

                    b.Property<int>("PupilType")
                        .HasColumnType("int")
                        .HasComment("瞳孔评估(0=左眼，1=右眼)");

                    b.HasKey("Id");

                    b.HasIndex("NursingRecordId");

                    b.ToTable("RpPupil", (string)null);

                    b.HasComment("瞳孔评估");
                });

            modelBuilder.Entity("YiJian.Health.Report.NursingDocuments.NursingDocument", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("AdmissionTime")
                        .HasColumnType("datetime2")
                        .HasComment("入院时间");

                    b.Property<string>("Age")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasComment("入科当时的年龄");

                    b.Property<string>("BedNumber")
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)")
                        .HasComment("床号");

                    b.Property<string>("CardNo")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("就诊卡号");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)")
                        .HasColumnName("ConcurrencyStamp");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreationTime");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CreatorId");

                    b.Property<DateTime?>("DayOfBirth")
                        .HasColumnType("datetime2")
                        .HasComment("出生日期");

                    b.Property<Guid?>("DeleterId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("DeleterId");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("DeletionTime");

                    b.Property<string>("DeptCode")
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)")
                        .HasComment("科室编号");

                    b.Property<string>("DeptName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("科室名称");

                    b.Property<string>("Diagnose")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)")
                        .HasComment("诊断");

                    b.Property<string>("EmergencyWay")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("入抢救室的方式");

                    b.Property<string>("ExtraProperties")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ExtraProperties");

                    b.Property<string>("Gender")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasComment("性别");

                    b.Property<string>("IDCard")
                        .HasMaxLength(18)
                        .HasColumnType("nvarchar(18)")
                        .HasComment("身份证");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("LastModificationTime");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("LastModifierId");

                    b.Property<string>("NursingCode")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasComment("护理单编码");

                    b.Property<Guid>("PI_ID")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("PI_ID");

                    b.Property<string>("Patient")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("患者名称");

                    b.Property<string>("PatientId")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)")
                        .HasComment("患者Id");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasComment("单据标题");

                    b.HasKey("Id");

                    b.HasIndex("AdmissionTime");

                    b.HasIndex("PatientId");

                    b.ToTable("RpNursingDocument", (string)null);

                    b.HasComment("护理单");
                });

            modelBuilder.Entity("YiJian.Health.Report.NursingDocuments.NursingRecord", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BP")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("血压BP收缩压(mmHg)");

                    b.Property<string>("BP2")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("血压BP舒张压(mmHg)");

                    b.Property<string>("Collator")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("核对人名称");

                    b.Property<string>("CollatorCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("核对人code");

                    b.Property<string>("CollatorImage")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("核对人签名图片");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)")
                        .HasColumnName("ConcurrencyStamp");

                    b.Property<string>("Consciousness")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("意识");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreationTime");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CreatorId");

                    b.Property<Guid?>("DeleterId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("DeleterId");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("DeletionTime");

                    b.Property<string>("ExtraProperties")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ExtraProperties");

                    b.Property<string>("Field1")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("保留字段1");

                    b.Property<string>("Field2")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("保留字段2");

                    b.Property<string>("Field3")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("保留字段3");

                    b.Property<string>("Field4")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("保留字段4");

                    b.Property<string>("Field5")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("保留字段5");

                    b.Property<string>("Field6")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("保留字段6");

                    b.Property<string>("Field7")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("保留字段7");

                    b.Property<string>("Field8")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("保留字段8");

                    b.Property<string>("Field9")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("保留字段9");

                    b.Property<string>("HR")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("心率(次/min)");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("LastModificationTime");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("LastModifierId");

                    b.Property<string>("Nurse")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("护士签名");

                    b.Property<string>("NurseCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("操作护士");

                    b.Property<Guid>("NursingDocumentId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("护理单Id");

                    b.Property<string>("P")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("脉搏P(次/min)");

                    b.Property<string>("R")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("呼吸(次/min)");

                    b.Property<DateTime>("RecordTime")
                        .HasColumnType("datetime2")
                        .HasComment("护理记录时间");

                    b.Property<string>("Remark")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)")
                        .HasComment("特殊情况记录");

                    b.Property<string>("SPO2")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("血氧饱和度SPO2 %");

                    b.Property<int>("SheetIndex")
                        .HasColumnType("int")
                        .HasComment("新建页索引");

                    b.Property<string>("Signature")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("签名图片");

                    b.Property<string>("T")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("体温（单位℃）");

                    b.HasKey("Id");

                    b.HasIndex("NursingDocumentId");

                    b.ToTable("RpNursingRecord", (string)null);

                    b.HasComment("护理记录");
                });

            modelBuilder.Entity("YiJian.Health.Report.NursingDocuments.SpecialNursingRecord", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)")
                        .HasColumnName("ConcurrencyStamp");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreationTime");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CreatorId");

                    b.Property<Guid?>("DeleterId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("DeleterId");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("DeletionTime");

                    b.Property<int?>("EventType")
                        .HasColumnType("int")
                        .HasComment("事件类型");

                    b.Property<string>("ExtraProperties")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ExtraProperties");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("LastModificationTime");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("LastModifierId");

                    b.Property<Guid>("NursingRecordId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("护理记录Id");

                    b.Property<Guid>("NursingRelevanceId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("特殊护理记录关联Id");

                    b.Property<string>("Special")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("特殊护理记录");

                    b.HasKey("Id");

                    b.HasIndex("NursingRecordId");

                    b.ToTable("RpSpecialNursingRecord", (string)null);

                    b.HasComment("特殊护理记录");
                });

            modelBuilder.Entity("YiJian.Health.Report.NursingDocuments.WardRound", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreationTime");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CreatorId");

                    b.Property<Guid?>("DeleterId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("DeleterId");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("DeletionTime");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("LastModificationTime");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("LastModifierId");

                    b.Property<string>("Level")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("级别");

                    b.Property<Guid>("NursingDocumentId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("护理单Id(外键)");

                    b.Property<int>("SheetIndex")
                        .HasColumnType("int")
                        .HasComment("护理单记录索引");

                    b.Property<string>("Signature")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("签名");

                    b.HasKey("Id");

                    b.HasIndex("NursingDocumentId");

                    b.ToTable("RpWardRound", (string)null);

                    b.HasComment("查房信息");
                });

            modelBuilder.Entity("YiJian.Health.Report.NursingSettings.Entities.NursingSetting", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("表头分类");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)")
                        .HasColumnName("ConcurrencyStamp");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreationTime");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CreatorId");

                    b.Property<Guid?>("DeleterId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("DeleterId");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("DeletionTime");

                    b.Property<string>("ExtraProperties")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ExtraProperties");

                    b.Property<string>("GroupId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("配置组Id");

                    b.Property<string>("GroupName")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("配置组名称");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("LastModificationTime");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("LastModifierId");

                    b.Property<int>("Sort")
                        .HasColumnType("int")
                        .HasComment("排序顺序");

                    b.HasKey("Id");

                    b.ToTable("RpNursingSetting", (string)null);

                    b.HasComment("护理单配置");
                });

            modelBuilder.Entity("YiJian.Health.Report.NursingSettings.Entities.NursingSettingHeader", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)")
                        .HasColumnName("ConcurrencyStamp");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreationTime");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CreatorId");

                    b.Property<Guid?>("DeleterId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("DeleterId");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("DeletionTime");

                    b.Property<string>("ExtraProperties")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ExtraProperties");

                    b.Property<string>("Header")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("表头名称");

                    b.Property<int>("InputType")
                        .HasColumnType("int")
                        .HasComment("表头类型");

                    b.Property<bool>("IsCarryInputBox")
                        .HasColumnType("bit")
                        .HasComment("是否带输入框");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("LastModificationTime");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("LastModifierId");

                    b.Property<Guid>("NursingSettingId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("护理单配置Id");

                    b.Property<int>("Sort")
                        .HasColumnType("int")
                        .HasComment("排序编号[序号]");

                    b.HasKey("Id");

                    b.HasIndex("NursingSettingId");

                    b.ToTable("RpNursingSettingHeader", (string)null);

                    b.HasComment("护理单表头配置");
                });

            modelBuilder.Entity("YiJian.Health.Report.NursingSettings.Entities.NursingSettingItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)")
                        .HasColumnName("ConcurrencyStamp");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreationTime");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CreatorId");

                    b.Property<Guid?>("DeleterId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("DeleterId");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("DeletionTime");

                    b.Property<string>("ExtraProperties")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ExtraProperties");

                    b.Property<bool>("HasNext")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasComment("是否有下一层");

                    b.Property<bool>("HasTextblock")
                        .HasColumnType("bit")
                        .HasComment("是否有提示文本");

                    b.Property<int>("InputType")
                        .HasColumnType("int")
                        .HasComment("表单域类型（0=普通文本域,1=单选按钮,2=复选框,3=下拉框）");

                    b.Property<bool>("IsCarryInputBox")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasComment("是否带输入框");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("LastModificationTime");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("LastModifierId");

                    b.Property<int>("Lv")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0)
                        .HasComment("层");

                    b.Property<Guid?>("NursingSettingHeaderId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("护理单表头配置Id");

                    b.Property<Guid?>("NursingSettingItemId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("自关联外键");

                    b.Property<int>("Sort")
                        .HasColumnType("int")
                        .HasComment("排序");

                    b.Property<string>("Text")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("文本描述（复选框、单选按钮、下拉框用）");

                    b.Property<string>("TextblockLeft")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("左边提示文本");

                    b.Property<string>("TextblockRight")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("右边提示文本");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("配置的值");

                    b.Property<string>("Watermark")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("水印配置，文本域用");

                    b.HasKey("Id");

                    b.HasIndex("NursingSettingHeaderId");

                    b.HasIndex("NursingSettingItemId");

                    b.ToTable("RpNursingSettingItem", (string)null);

                    b.HasComment("护理单配置项");
                });

            modelBuilder.Entity("YiJian.Health.Report.PageSize", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("编码");

                    b.Property<decimal>("Height")
                        .HasColumnType("decimal(18,2)")
                        .HasComment("高");

                    b.Property<decimal>("Width")
                        .HasColumnType("decimal(18,2)")
                        .HasComment("宽");

                    b.HasKey("Id");

                    b.ToTable("RpPageSize", (string)null);

                    b.HasComment("纸张大小");
                });

            modelBuilder.Entity("YiJian.Health.Report.PrintCatalogs.PrintCatalog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CataLogName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("目录名称");

                    b.Property<int>("Type")
                        .HasColumnType("int")
                        .HasComment("类型，0:打印中心，1：其他地方打印");

                    b.HasKey("Id");

                    b.ToTable("RpPrintCatalog", (string)null);

                    b.HasComment("打印目录");
                });

            modelBuilder.Entity("YiJian.Health.Report.PrintSettings.PrintSetting", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CataLogId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("目录Id");

                    b.Property<string>("Code")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("编码");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)")
                        .HasColumnName("ConcurrencyStamp");

                    b.Property<string>("CreationName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("创建人名称");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreationTime");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CreatorId");

                    b.Property<Guid?>("DeleterId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("DeleterId");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("DeletionTime");

                    b.Property<string>("ExtraProperties")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ExtraProperties");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("IsDeleted");

                    b.Property<bool>("IsPreview")
                        .HasColumnType("bit")
                        .HasComment("是否预览");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("LastModificationTime");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("LastModifierId");

                    b.Property<string>("Layout")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("布局");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("名称");

                    b.Property<string>("PageSizeCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("纸张编码");

                    b.Property<string>("ParamUrl")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasComment("传参Url");

                    b.Property<string>("PrintMethod")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("打印方式");

                    b.Property<string>("Remark")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasComment("备注");

                    b.Property<string>("ReportTypeCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("单据类型编码");

                    b.Property<int>("Sort")
                        .HasColumnType("int")
                        .HasComment("排序");

                    b.Property<bool>("Status")
                        .HasColumnType("bit")
                        .HasComment("状态");

                    b.Property<string>("TempContent")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("模板内容");

                    b.Property<string>("TempType")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("模板类型");

                    b.HasKey("Id");

                    b.ToTable("RpPrintSetting", (string)null);

                    b.HasComment("打印设置");
                });

            modelBuilder.Entity("YiJian.Health.Report.ReportDatas.ReportData", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2")
                        .HasComment("创建时间");

                    b.Property<string>("DataContent")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("数据");

                    b.Property<string>("OperationCode")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("操作人编码");

                    b.Property<Guid>("PIID")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("患者分诊id");

                    b.Property<string>("PrescriptionNo")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("处方号");

                    b.Property<Guid>("TempId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("模板id");

                    b.HasKey("Id");

                    b.ToTable("RpReportData", (string)null);

                    b.HasComment("报表打印数据");
                });

            modelBuilder.Entity("YiJian.Health.Report.Statisticses.Entities.StatisticsMonthDoctorAndPatient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("DoctorTotal")
                        .HasColumnType("int")
                        .HasComment("在岗医师总数");

                    b.Property<int>("Month")
                        .HasColumnType("int")
                        .HasComment("月");

                    b.Property<int>("ReceptionTotal")
                        .HasColumnType("int")
                        .HasComment("接诊总数");

                    b.Property<int>("Year")
                        .HasColumnType("int")
                        .HasComment("年");

                    b.Property<DateTime>("YearMonth")
                        .HasColumnType("datetime2")
                        .HasComment("月份，方便查询用的字段");

                    b.HasKey("Id");

                    b.ToTable("RpStatisticsMonthDoctorAndPatient", (string)null);

                    b.HasComment("急诊科医患月度视图");
                });

            modelBuilder.Entity("YiJian.Health.Report.Statisticses.Entities.StatisticsMonthEmergencyroomAndDeathPatient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("DeathToll")
                        .HasColumnType("int")
                        .HasComment("死亡总数");

                    b.Property<int>("Month")
                        .HasColumnType("int")
                        .HasComment("月份");

                    b.Property<int>("RescueTotal")
                        .HasColumnType("int")
                        .HasComment("抢救总数");

                    b.Property<int>("Year")
                        .HasColumnType("int")
                        .HasComment("年份");

                    b.Property<DateTime>("YearMonth")
                        .HasColumnType("datetime2")
                        .HasComment("月份，方便查询用的字段");

                    b.HasKey("Id");

                    b.ToTable("RpStatisticsMonthEmergencyroomAndDeathPatient", (string)null);

                    b.HasComment("急诊抢救室患者死亡率月度视图");
                });

            modelBuilder.Entity("YiJian.Health.Report.Statisticses.Entities.StatisticsMonthEmergencyroomAndPatient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AvgDetentionTime")
                        .HasColumnType("int")
                        .HasComment("平均滞留时间");

                    b.Property<int>("MidDetentionTime")
                        .HasColumnType("int")
                        .HasComment("滞留时间中位数");

                    b.Property<int>("Month")
                        .HasColumnType("int")
                        .HasComment("月份");

                    b.Property<int>("RescueTotal")
                        .HasColumnType("int")
                        .HasComment("抢救总数");

                    b.Property<int>("Year")
                        .HasColumnType("int")
                        .HasComment("年份");

                    b.Property<DateTime>("YearMonth")
                        .HasColumnType("datetime2")
                        .HasComment("月份，方便查询用的字段");

                    b.HasKey("Id");

                    b.ToTable("RpStatisticsMonthEmergencyroomAndPatient", (string)null);

                    b.HasComment("抢救室滞留时间中位数月度视图");
                });

            modelBuilder.Entity("YiJian.Health.Report.Statisticses.Entities.StatisticsMonthLevelAndPatient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("LI")
                        .HasColumnType("int")
                        .HasComment("I级");

                    b.Property<int>("LII")
                        .HasColumnType("int")
                        .HasComment("II级");

                    b.Property<int>("LIII")
                        .HasColumnType("int")
                        .HasComment("III级");

                    b.Property<int>("LIVa")
                        .HasColumnType("int")
                        .HasComment("IVa级");

                    b.Property<int>("LIVb")
                        .HasColumnType("int")
                        .HasComment("IVb级");

                    b.Property<int>("Month")
                        .HasColumnType("int")
                        .HasComment("月份");

                    b.Property<int>("Year")
                        .HasColumnType("int")
                        .HasComment("年份");

                    b.Property<DateTime>("YearMonth")
                        .HasColumnType("datetime2")
                        .HasComment("月份，方便查询用的字段");

                    b.HasKey("Id");

                    b.ToTable("RpStatisticsMonthLevelAndPatient", (string)null);

                    b.HasComment("急诊科各级患者比例月度视图");
                });

            modelBuilder.Entity("YiJian.Health.Report.Statisticses.Entities.StatisticsMonthNurseAndPatient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Month")
                        .HasColumnType("int")
                        .HasComment("月份");

                    b.Property<int>("NurseTotal")
                        .HasColumnType("int")
                        .HasComment("在岗护士总数");

                    b.Property<int>("ReceptionTotal")
                        .HasColumnType("int")
                        .HasComment("接诊总数");

                    b.Property<int>("Year")
                        .HasColumnType("int")
                        .HasComment("年份");

                    b.Property<DateTime>("YearMonth")
                        .HasColumnType("datetime2")
                        .HasComment("月份，方便查询用的字段");

                    b.HasKey("Id");

                    b.ToTable("RpStatisticsMonthNurseAndPatient", (string)null);

                    b.HasComment("急诊科护患月度视图");
                });

            modelBuilder.Entity("YiJian.Health.Report.Statisticses.Entities.StatisticsQuarterDoctorAndPatient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("DoctorTotal")
                        .HasColumnType("int")
                        .HasComment("在岗医师总数");

                    b.Property<int>("Quarter")
                        .HasColumnType("int")
                        .HasComment("季度");

                    b.Property<int>("ReceptionTotal")
                        .HasColumnType("int")
                        .HasComment("接诊总数");

                    b.Property<int>("Year")
                        .HasColumnType("int")
                        .HasComment("年");

                    b.Property<DateTime>("YearQuarter")
                        .HasColumnType("datetime2")
                        .HasComment("季度，方便查询用的字段");

                    b.HasKey("Id");

                    b.ToTable("RpStatisticsQuarterDoctorAndPatient", (string)null);

                    b.HasComment("急诊科医患季度视图");
                });

            modelBuilder.Entity("YiJian.Health.Report.Statisticses.Entities.StatisticsQuarterEmergencyroomAndDeathPatient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("DeathToll")
                        .HasColumnType("int")
                        .HasComment("死亡总数");

                    b.Property<int>("Quarter")
                        .HasColumnType("int")
                        .HasComment("季度");

                    b.Property<int>("RescueTotal")
                        .HasColumnType("int")
                        .HasComment("抢救总数");

                    b.Property<int>("Year")
                        .HasColumnType("int")
                        .HasComment("年份");

                    b.Property<DateTime>("YearQuarter")
                        .HasColumnType("datetime2")
                        .HasComment("季度，方便查询用的字段");

                    b.HasKey("Id");

                    b.ToTable("RpStatisticsQuarterEmergencyroomAndDeathPatient", (string)null);

                    b.HasComment("急诊抢救室患者死亡率季度视图");
                });

            modelBuilder.Entity("YiJian.Health.Report.Statisticses.Entities.StatisticsQuarterEmergencyroomAndPatient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AvgDetentionTime")
                        .HasColumnType("int")
                        .HasComment("平均滞留时间");

                    b.Property<int>("MidDetentionTime")
                        .HasColumnType("int")
                        .HasComment("滞留时间中位数");

                    b.Property<int>("Quarter")
                        .HasColumnType("int")
                        .HasComment("季度");

                    b.Property<int>("RescueTotal")
                        .HasColumnType("int")
                        .HasComment("抢救总数");

                    b.Property<int>("Year")
                        .HasColumnType("int")
                        .HasComment("年份");

                    b.Property<DateTime>("YearQuarter")
                        .HasColumnType("datetime2")
                        .HasComment("季度，方便查询用的字段");

                    b.HasKey("Id");

                    b.ToTable("RpStatisticsQuarterEmergencyroomAndPatient", (string)null);

                    b.HasComment("抢救室滞留时间中位数季度视图");
                });

            modelBuilder.Entity("YiJian.Health.Report.Statisticses.Entities.StatisticsQuarterLevelAndPatient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("LI")
                        .HasColumnType("int")
                        .HasComment("I级");

                    b.Property<int>("LII")
                        .HasColumnType("int")
                        .HasComment("II级");

                    b.Property<int>("LIII")
                        .HasColumnType("int")
                        .HasComment("III级");

                    b.Property<int>("LIVa")
                        .HasColumnType("int")
                        .HasComment("IVa级");

                    b.Property<int>("LIVb")
                        .HasColumnType("int")
                        .HasComment("IVb级");

                    b.Property<int>("Quarter")
                        .HasColumnType("int")
                        .HasComment("季度");

                    b.Property<int>("Year")
                        .HasColumnType("int")
                        .HasComment("年份");

                    b.Property<DateTime>("YearQuarter")
                        .HasColumnType("datetime2")
                        .HasComment("季度，方便查询用的字段");

                    b.HasKey("Id");

                    b.ToTable("RpStatisticsQuarterLevelAndPatient", (string)null);

                    b.HasComment("急诊科各级患者比例季度视图");
                });

            modelBuilder.Entity("YiJian.Health.Report.Statisticses.Entities.StatisticsQuarterNurseAndPatient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("NurseTotal")
                        .HasColumnType("int")
                        .HasComment("在岗护士总数");

                    b.Property<int>("Quarter")
                        .HasColumnType("int")
                        .HasComment("季度");

                    b.Property<int>("ReceptionTotal")
                        .HasColumnType("int")
                        .HasComment("接诊总数");

                    b.Property<int>("Year")
                        .HasColumnType("int")
                        .HasComment("年份");

                    b.Property<DateTime>("YearQuarter")
                        .HasColumnType("datetime2")
                        .HasComment("季度，方便查询用的字段");

                    b.HasKey("Id");

                    b.ToTable("RpStatisticsQuarterNurseAndPatient", (string)null);

                    b.HasComment("急诊科护患季度视图");
                });

            modelBuilder.Entity("YiJian.Health.Report.Statisticses.Entities.StatisticsYearDoctorAndPatient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("DoctorTotal")
                        .HasColumnType("int")
                        .HasComment("在岗医师总数");

                    b.Property<int>("ReceptionTotal")
                        .HasColumnType("int")
                        .HasComment("接诊总数");

                    b.Property<int>("Year")
                        .HasColumnType("int")
                        .HasComment("年份");

                    b.HasKey("Id");

                    b.ToTable("RpStatisticsYearDoctorAndPatient", (string)null);

                    b.HasComment("急诊科医患年度视图");
                });

            modelBuilder.Entity("YiJian.Health.Report.Statisticses.Entities.StatisticsYearEmergencyroomAndDeathPatient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("DeathToll")
                        .HasColumnType("int")
                        .HasComment("死亡总数");

                    b.Property<int>("RescueTotal")
                        .HasColumnType("int")
                        .HasComment("抢救总数");

                    b.Property<int>("Year")
                        .HasColumnType("int")
                        .HasComment("年份");

                    b.HasKey("Id");

                    b.ToTable("RpStatisticsYearEmergencyroomAndDeathPatient", (string)null);

                    b.HasComment("急诊抢救室患者死亡率年度视图");
                });

            modelBuilder.Entity("YiJian.Health.Report.Statisticses.Entities.StatisticsYearEmergencyroomAndPatient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AvgDetentionTime")
                        .HasColumnType("int")
                        .HasComment("平均滞留时间");

                    b.Property<int>("MidDetentionTime")
                        .HasColumnType("int")
                        .HasComment("滞留时间中位数");

                    b.Property<int>("RescueTotal")
                        .HasColumnType("int")
                        .HasComment("抢救总数");

                    b.Property<int>("Year")
                        .HasColumnType("int")
                        .HasComment("年份");

                    b.HasKey("Id");

                    b.ToTable("RpStatisticsYearEmergencyroomAndPatient", (string)null);

                    b.HasComment("抢救室滞留时间中位数年度视图");
                });

            modelBuilder.Entity("YiJian.Health.Report.Statisticses.Entities.StatisticsYearLevelAndPatient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("LI")
                        .HasColumnType("int")
                        .HasComment("I级");

                    b.Property<int>("LII")
                        .HasColumnType("int")
                        .HasComment("II级");

                    b.Property<int>("LIII")
                        .HasColumnType("int")
                        .HasComment("III级");

                    b.Property<int>("LIVa")
                        .HasColumnType("int")
                        .HasComment("IVa级");

                    b.Property<int>("LIVb")
                        .HasColumnType("int")
                        .HasComment("IVb级");

                    b.Property<int>("Year")
                        .HasColumnType("int")
                        .HasComment("年份");

                    b.HasKey("Id");

                    b.ToTable("RpStatisticsYearLevelAndPatient", (string)null);

                    b.HasComment("急诊科各级患者比例年度视图");
                });

            modelBuilder.Entity("YiJian.Health.Report.Statisticses.Entities.StatisticsYearNurseAndPatient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("NurseTotal")
                        .HasColumnType("int")
                        .HasComment("在岗护士总数");

                    b.Property<int>("ReceptionTotal")
                        .HasColumnType("int")
                        .HasComment("接诊总数");

                    b.Property<int>("Year")
                        .HasColumnType("int")
                        .HasComment("年份");

                    b.HasKey("Id");

                    b.ToTable("RpStatisticsYearNurseAndPatient", (string)null);

                    b.HasComment("急诊科护患年度视图");
                });

            modelBuilder.Entity("YiJian.Health.Report.Statisticses.Entities.ViewAdmissionRecord", b =>
                {
                    b.Property<string>("Age")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("年龄");

                    b.Property<DateTime>("Birthday")
                        .HasColumnType("datetime2")
                        .HasComment("出生日期");

                    b.Property<string>("ContactsPhone")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("联系方式");

                    b.Property<string>("DutyNurseCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("接诊护士");

                    b.Property<string>("DutyNurseName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("接诊护士");

                    b.Property<string>("FirstDoctorCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("接诊医生");

                    b.Property<string>("FirstDoctorName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("接诊医生");

                    b.Property<string>("IDNo")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("身份证");

                    b.Property<DateTime?>("OutDeptTime")
                        .HasMaxLength(50)
                        .HasColumnType("datetime2")
                        .HasComment("出科时间");

                    b.Property<string>("PatientID")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("患者ID");

                    b.Property<string>("PatientName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("患者名称");

                    b.Property<string>("SexName")
                        .HasMaxLength(4)
                        .HasColumnType("nvarchar(4)")
                        .HasComment("性别");

                    b.Property<string>("TriageLevel")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("分诊等级");

                    b.Property<string>("TriageLevelName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("分诊等级名称");

                    b.Property<string>("VisSerialNo")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("就诊流水号");

                    b.Property<DateTime>("VisitDate")
                        .HasColumnType("datetime2")
                        .HasComment("接诊时间");

                    b.Property<string>("VisitNo")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("就诊号");

                    b.ToView("v_AdmissionRecord");

                    b.HasComment("入院病人记录视图");
                });

            modelBuilder.Entity("YiJian.Health.Report.Statisticses.Entities.ViewAdmissionTransfeRecord", b =>
                {
                    b.Property<string>("Age")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("年龄");

                    b.Property<DateTime>("Birthday")
                        .HasColumnType("datetime2")
                        .HasComment("出生日期");

                    b.Property<string>("ContactsPhone")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("联系方式");

                    b.Property<string>("DutyNurseCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("接诊护士");

                    b.Property<string>("DutyNurseName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("接诊护士");

                    b.Property<string>("FirstDoctorCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("接诊医生");

                    b.Property<string>("FirstDoctorName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("接诊医生");

                    b.Property<string>("FromAreaCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("流转源区域");

                    b.Property<string>("IDNo")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("身份证");

                    b.Property<DateTime?>("OutDeptTime")
                        .HasMaxLength(50)
                        .HasColumnType("datetime2")
                        .HasComment("出科时间");

                    b.Property<string>("PatientID")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("患者ID");

                    b.Property<string>("PatientName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("患者名称");

                    b.Property<int>("ResidenceTime")
                        .HasColumnType("int")
                        .HasComment("滞留时长-分钟");

                    b.Property<string>("SexName")
                        .HasMaxLength(4)
                        .HasColumnType("nvarchar(4)")
                        .HasComment("性别");

                    b.Property<string>("ToArea")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("流转目标区域名称");

                    b.Property<string>("ToAreaCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("流转目标区域");

                    b.Property<string>("TransferReason")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasComment("流转原因");

                    b.Property<DateTime?>("TransferTime")
                        .HasColumnType("datetime2")
                        .HasComment("流转时间");

                    b.Property<string>("TransferType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("流转类型");

                    b.Property<string>("TriageLevel")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("分诊等级");

                    b.Property<string>("TriageLevelName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("分诊等级名称");

                    b.Property<string>("VisSerialNo")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("就诊流水号");

                    b.Property<DateTime>("VisitDate")
                        .HasColumnType("datetime2")
                        .HasComment("接诊时间");

                    b.Property<string>("VisitNo")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("就诊号");

                    b.ToView("v_AdmissionTransfeRecord");
                });

            modelBuilder.Entity("YiJian.Health.Report.Domain.PhraseCatalogues.Entities.Phrase", b =>
                {
                    b.HasOne("YiJian.Health.Report.Domain.PhraseCatalogues.Entities.PhraseCatalogue", "Catalogue")
                        .WithMany("Phrases")
                        .HasForeignKey("CatalogueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Catalogue");
                });

            modelBuilder.Entity("YiJian.Health.Report.NursingDocuments.DynamicField", b =>
                {
                    b.HasOne("YiJian.Health.Report.NursingDocuments.NursingDocument", "NursingDocument")
                        .WithMany("DynamicFields")
                        .HasForeignKey("NursingDocumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("NursingDocument");
                });

            modelBuilder.Entity("YiJian.Health.Report.NursingDocuments.Entities.Characteristic", b =>
                {
                    b.HasOne("YiJian.Health.Report.NursingDocuments.NursingRecord", "NursingRecord")
                        .WithMany("Characteristic")
                        .HasForeignKey("NursingRecordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("NursingRecord");
                });

            modelBuilder.Entity("YiJian.Health.Report.NursingDocuments.Entities.CriticalIllness", b =>
                {
                    b.HasOne("YiJian.Health.Report.NursingDocuments.NursingDocument", null)
                        .WithMany("CriticalIllnesses")
                        .HasForeignKey("NursingDocumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("YiJian.Health.Report.NursingDocuments.Entities.Intake", b =>
                {
                    b.HasOne("YiJian.Health.Report.NursingDocuments.NursingRecord", null)
                        .WithMany("Intakes")
                        .HasForeignKey("NursingRecordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("YiJian.Health.Report.NursingDocuments.Entities.Mmol", b =>
                {
                    b.HasOne("YiJian.Health.Report.NursingDocuments.NursingRecord", null)
                        .WithOne("Mmol")
                        .HasForeignKey("YiJian.Health.Report.NursingDocuments.Entities.Mmol", "NursingRecordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("YiJian.Health.Report.NursingDocuments.Entities.Pupil", b =>
                {
                    b.HasOne("YiJian.Health.Report.NursingDocuments.NursingRecord", null)
                        .WithMany("Pupil")
                        .HasForeignKey("NursingRecordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("YiJian.Health.Report.NursingDocuments.NursingRecord", b =>
                {
                    b.HasOne("YiJian.Health.Report.NursingDocuments.NursingDocument", "NursingDocument")
                        .WithMany("NursingRecords")
                        .HasForeignKey("NursingDocumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("NursingDocument");
                });

            modelBuilder.Entity("YiJian.Health.Report.NursingDocuments.SpecialNursingRecord", b =>
                {
                    b.HasOne("YiJian.Health.Report.NursingDocuments.NursingRecord", null)
                        .WithMany("SpecialNursings")
                        .HasForeignKey("NursingRecordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("YiJian.Health.Report.NursingDocuments.WardRound", b =>
                {
                    b.HasOne("YiJian.Health.Report.NursingDocuments.NursingDocument", null)
                        .WithMany("WardRounds")
                        .HasForeignKey("NursingDocumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("YiJian.Health.Report.NursingSettings.Entities.NursingSettingHeader", b =>
                {
                    b.HasOne("YiJian.Health.Report.NursingSettings.Entities.NursingSetting", "NursingSetting")
                        .WithMany("Headers")
                        .HasForeignKey("NursingSettingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("NursingSetting");
                });

            modelBuilder.Entity("YiJian.Health.Report.NursingSettings.Entities.NursingSettingItem", b =>
                {
                    b.HasOne("YiJian.Health.Report.NursingSettings.Entities.NursingSettingHeader", "NursingSettingHeader")
                        .WithMany("Items")
                        .HasForeignKey("NursingSettingHeaderId");

                    b.HasOne("YiJian.Health.Report.NursingSettings.Entities.NursingSettingItem", null)
                        .WithMany("Items")
                        .HasForeignKey("NursingSettingItemId");

                    b.Navigation("NursingSettingHeader");
                });

            modelBuilder.Entity("YiJian.Health.Report.Domain.PhraseCatalogues.Entities.PhraseCatalogue", b =>
                {
                    b.Navigation("Phrases");
                });

            modelBuilder.Entity("YiJian.Health.Report.NursingDocuments.NursingDocument", b =>
                {
                    b.Navigation("CriticalIllnesses");

                    b.Navigation("DynamicFields");

                    b.Navigation("NursingRecords");

                    b.Navigation("WardRounds");
                });

            modelBuilder.Entity("YiJian.Health.Report.NursingDocuments.NursingRecord", b =>
                {
                    b.Navigation("Characteristic");

                    b.Navigation("Intakes");

                    b.Navigation("Mmol");

                    b.Navigation("Pupil");

                    b.Navigation("SpecialNursings");
                });

            modelBuilder.Entity("YiJian.Health.Report.NursingSettings.Entities.NursingSetting", b =>
                {
                    b.Navigation("Headers");
                });

            modelBuilder.Entity("YiJian.Health.Report.NursingSettings.Entities.NursingSettingHeader", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("YiJian.Health.Report.NursingSettings.Entities.NursingSettingItem", b =>
                {
                    b.Navigation("Items");
                });
#pragma warning restore 612, 618
        }
    }
}
