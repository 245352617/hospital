// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Volo.Abp.EntityFrameworkCore;
using YiJian.Nursing.EntityFrameworkCore;

namespace YiJian.Nursing.Migrations
{
    [DbContext(typeof(NursingHttpApiHostMigrationsDbContext))]
    [Migration("20211206063403_initdb_recipe")]
    partial class initdb_recipe
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("_Abp_DatabaseProvider", EfCoreDatabaseProvider.SqlServer)
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.12")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("YiJian.Nursing.IllnessObserveHeader", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)")
                        .HasColumnName("ConcurrencyStamp");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreationTime");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CreatorId");

                    b.Property<Guid?>("DeleterId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("DeleterId");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("DeletionTime");

                    b.Property<string>("ExtraProperties")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ExtraProperties");

                    b.Property<int>("Grade")
                        .HasColumnType("int")
                        .HasComment("等级，1:一级，2：二级");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("IsDeleted");

                    b.Property<string>("ItemCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasComment("项目编码");

                    b.Property<string>("ItemName")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasComment("项目名称");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("LastModificationTime");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("LastModifierId");

                    b.Property<decimal>("MaxEarlyWarning")
                        .HasColumnType("decimal(18,2)")
                        .HasComment("最大值预警");

                    b.Property<decimal>("MaxValue")
                        .HasColumnType("decimal(18,2)")
                        .HasComment("最大值");

                    b.Property<decimal>("MinEarlyWarning")
                        .HasColumnType("decimal(18,2)")
                        .HasComment("最小值预警");

                    b.Property<decimal>("MinValue")
                        .HasColumnType("decimal(18,2)")
                        .HasComment("最小值");

                    b.Property<string>("ParentCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasComment("父级编码");

                    b.Property<string>("Unit")
                        .HasColumnType("nvarchar(50)")
                        .HasComment("单位");

                    b.HasKey("Id");

                    b.ToTable("NursingIllnessObserveHeader");

                    b
                        .HasComment("病情观察头部");
                });

            modelBuilder.Entity("YiJian.Nursing.IllnessObserveInput", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BloodTransfusion")
                        .HasColumnType("nvarchar(10)")
                        .HasComment("输血");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)")
                        .HasColumnName("ConcurrencyStamp");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreationTime");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CreatorId");

                    b.Property<Guid?>("DeleterId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("DeleterId");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("DeletionTime");

                    b.Property<string>("Diet")
                        .HasColumnType("nvarchar(10)")
                        .HasComment("饮食");

                    b.Property<string>("ExtraProperties")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ExtraProperties");

                    b.Property<Guid>("IllnessObserveMainId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("主表id");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("LastModificationTime");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("LastModifierId");

                    b.Property<string>("NasalFeeding")
                        .HasColumnType("nvarchar(10)")
                        .HasComment("鼻饲");

                    b.Property<string>("TotalInput")
                        .HasColumnType("nvarchar(10)")
                        .HasComment("入量合计");

                    b.Property<string>("Water")
                        .HasColumnType("nvarchar(10)")
                        .HasComment("水");

                    b.HasKey("Id");

                    b.HasIndex("IllnessObserveMainId")
                        .IsUnique();

                    b.ToTable("NursingIllnessObserveInput");

                    b
                        .HasComment("病情观察入量表");
                });

            modelBuilder.Entity("YiJian.Nursing.IllnessObserveMain", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BloodSugar")
                        .HasColumnType("nvarchar(10)")
                        .HasComment("血糖");

                    b.Property<string>("Breathing")
                        .HasColumnType("nvarchar(10)")
                        .HasComment("呼吸");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)")
                        .HasColumnName("ConcurrencyStamp");

                    b.Property<string>("ConsciousnessCode")
                        .HasColumnType("nvarchar(50)")
                        .HasComment("意识编码");

                    b.Property<string>("ConsciousnessName")
                        .HasColumnType("nvarchar(100)")
                        .HasComment("意识名称");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreationTime");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CreatorId");

                    b.Property<Guid?>("DeleterId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("DeleterId");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("DeletionTime");

                    b.Property<string>("ExtraProperties")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ExtraProperties");

                    b.Property<string>("HeartRate")
                        .HasColumnType("nvarchar(10)")
                        .HasComment("心率");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("LastModificationTime");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("LastModifierId");

                    b.Property<string>("LeftPupilSize")
                        .HasColumnType("nvarchar(10)")
                        .HasComment("左瞳大小");

                    b.Property<int>("LeftPupilType")
                        .HasColumnType("int")
                        .HasComment("左瞳类型，0：灵敏，1：迟钝，2：无反应");

                    b.Property<string>("ObserveTime")
                        .HasColumnType("nvarchar(20)")
                        .HasComment("时间");

                    b.Property<Guid>("PI_ID")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("traige患者id");

                    b.Property<string>("PatientId")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("患者id");

                    b.Property<string>("RightPupilSize")
                        .HasColumnType("nvarchar(10)")
                        .HasComment("右瞳大小");

                    b.Property<int>("RightPupilType")
                        .HasColumnType("int")
                        .HasComment("右瞳类型，0：灵敏，1：迟钝，2：无反应");

                    b.Property<string>("Sbp")
                        .HasColumnType("nvarchar(10)")
                        .HasComment("血压BP收缩压");

                    b.Property<string>("Sdp")
                        .HasColumnType("nvarchar(10)")
                        .HasComment("血压BP舒张压");

                    b.Property<string>("SpO2")
                        .HasColumnType("nvarchar(10)")
                        .HasComment("血氧饱和度");

                    b.Property<string>("Temperature")
                        .HasColumnType("nvarchar(10)")
                        .HasComment("体温");

                    b.Property<int>("VisitNo")
                        .HasColumnType("int")
                        .HasComment("就诊号");

                    b.HasKey("Id");

                    b.ToTable("NursingIllnessObserveMain");

                    b
                        .HasComment("病情观察");
                });

            modelBuilder.Entity("YiJian.Nursing.IllnessObserveOther", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("C")
                        .HasColumnType("nvarchar(10)")
                        .HasComment("GCS分");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)")
                        .HasColumnName("ConcurrencyStamp");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreationTime");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CreatorId");

                    b.Property<Guid?>("DeleterId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("DeleterId");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("DeletionTime");

                    b.Property<string>("ElectricCardioversion")
                        .HasColumnType("nvarchar(10)")
                        .HasComment("电复律");

                    b.Property<string>("ExtraProperties")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ExtraProperties");

                    b.Property<string>("G")
                        .HasColumnType("nvarchar(10)")
                        .HasComment("GCS分");

                    b.Property<Guid>("IllnessObserveMainId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("主表id");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("LastModificationTime");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("LastModifierId");

                    b.Property<string>("S")
                        .HasColumnType("nvarchar(10)")
                        .HasComment("GCS分");

                    b.Property<string>("TurnOver")
                        .HasColumnType("nvarchar(10)")
                        .HasComment("翻身");

                    b.HasKey("Id");

                    b.HasIndex("IllnessObserveMainId")
                        .IsUnique();

                    b.ToTable("NursingIllnessObserveOther");

                    b
                        .HasComment("病情观察其他");
                });

            modelBuilder.Entity("YiJian.Nursing.IllnessObserveOutput", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)")
                        .HasColumnName("ConcurrencyStamp");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreationTime");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CreatorId");

                    b.Property<Guid?>("DeleterId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("DeleterId");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("DeletionTime");

                    b.Property<string>("ExtraProperties")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ExtraProperties");

                    b.Property<Guid>("IllnessObserveMainId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("主表id");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("LastModificationTime");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("LastModifierId");

                    b.Property<string>("Shit")
                        .HasColumnType("nvarchar(10)")
                        .HasComment("大便");

                    b.Property<string>("SputumSuction")
                        .HasColumnType("nvarchar(10)")
                        .HasComment("吸痰");

                    b.Property<string>("Sweat")
                        .HasColumnType("nvarchar(10)")
                        .HasComment("汗液");

                    b.Property<string>("TotalOutput")
                        .HasColumnType("nvarchar(10)")
                        .HasComment("出量合计");

                    b.Property<string>("UrineVolume")
                        .HasColumnType("nvarchar(10)")
                        .HasComment("尿量");

                    b.Property<string>("VenousInflow")
                        .HasColumnType("nvarchar(10)")
                        .HasComment("静脉入量");

                    b.Property<string>("Vomit")
                        .HasColumnType("nvarchar(10)")
                        .HasComment("呕吐");

                    b.HasKey("Id");

                    b.HasIndex("IllnessObserveMainId")
                        .IsUnique();

                    b.ToTable("NursingIllnessObserveOutput");

                    b
                        .HasComment("病情观察出量表");
                });

            modelBuilder.Entity("YiJian.Nursing.Lis", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Catalog")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("检验类别");

                    b.Property<string>("CatalogCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("检验类别编码");

                    b.Property<string>("ClinicalSymptom")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)")
                        .HasComment("临床症状");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)")
                        .HasColumnName("ConcurrencyStamp");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreationTime");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CreatorId");

                    b.Property<Guid?>("DeleterId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("DeleterId");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("DeletionTime");

                    b.Property<string>("ExtraProperties")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ExtraProperties");

                    b.Property<bool>("HasReport")
                        .HasColumnType("bit")
                        .HasComment("报告标识");

                    b.Property<string>("HospitalCode")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("HospitalName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("IsDeleted");

                    b.Property<bool>("IsEmergency")
                        .HasColumnType("bit")
                        .HasComment("是否紧急");

                    b.Property<bool?>("IsProHospitalUse")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("LastModificationTime");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("LastModifierId");

                    b.Property<string>("Position")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("位置");

                    b.Property<string>("PositionCode")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("位置编码");

                    b.Property<Guid>("RecipeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ReportDT")
                        .HasColumnType("datetime2")
                        .HasComment("出报告时间");

                    b.Property<string>("ReportDoctor")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("确认报告医生");

                    b.Property<string>("ReportDoctorCode")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("确认报告医生编码");

                    b.Property<string>("Specimen")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("标本");

                    b.Property<string>("SpecimenCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("标本编码");

                    b.Property<DateTime?>("SpecimenCollectDT")
                        .HasColumnType("datetime2")
                        .HasComment("标本采集时间");

                    b.Property<string>("SpecimenContainer")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("标本容器");

                    b.Property<string>("SpecimenContainerCode")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("标本容器代码");

                    b.Property<int?>("SpecimenContainerColor")
                        .HasMaxLength(20)
                        .HasColumnType("int")
                        .HasComment("标本容器颜色 0 红帽 1 蓝帽 2 紫帽");

                    b.Property<string>("SpecimenDescription")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasComment("标本说明");

                    b.Property<string>("SpecimenPart")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("标本采集部位");

                    b.Property<string>("SpecimenPartCode")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("标本采集部位编码");

                    b.Property<DateTime?>("SpecimenReceivedDT")
                        .HasColumnType("datetime2")
                        .HasComment("标本接收时间");

                    b.HasKey("Id");

                    b.HasIndex("RecipeId");

                    b.ToTable("NursingLis");

                    b
                        .HasComment("检验项");
                });

            modelBuilder.Entity("YiJian.Nursing.LisTarget", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)")
                        .HasComment("数量");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("小项编码");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)")
                        .HasColumnName("ConcurrencyStamp");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreationTime");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CreatorId");

                    b.Property<Guid?>("DeleterId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("DeleterId");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("DeletionTime");

                    b.Property<string>("ExtraProperties")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ExtraProperties");

                    b.Property<string>("HospitalCode")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("HospitalName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Insurance")
                        .HasColumnType("int")
                        .HasComment("医保目录：0-自费项目1-医保项目(甲、乙)");

                    b.Property<string>("InsuranceCode")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("医保目录编码");

                    b.Property<string>("InsuranceDescription")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("医保目录描述");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("IsDeleted");

                    b.Property<bool?>("IsProHospitalUse")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("LastModificationTime");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("LastModifierId");

                    b.Property<Guid>("LisId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("项目标识-外键");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasComment("小项名称");

                    b.Property<decimal>("Price")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)")
                        .HasComment("单价");

                    b.Property<Guid>("TargetId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("小项标识");

                    b.Property<decimal>("TotalFee")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)")
                        .HasComment("总费用");

                    b.Property<string>("Unit")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("单位");

                    b.HasKey("Id");

                    b.HasIndex("LisId");

                    b.ToTable("NursingLisTargets");

                    b
                        .HasComment("检验小项");
                });

            modelBuilder.Entity("YiJian.Nursing.Pacs", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Catalog")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("检查类别");

                    b.Property<string>("CatalogCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("检查类别编码");

                    b.Property<string>("CatalogDisplayName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("分类类型名称 例如心电图申请单、超声申请单");

                    b.Property<string>("ClinicalSymptom")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)")
                        .HasComment("临床症状");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)")
                        .HasColumnName("ConcurrencyStamp");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreationTime");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CreatorId");

                    b.Property<Guid?>("DeleterId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("DeleterId");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("DeletionTime");

                    b.Property<string>("ExamPart")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("检查部位");

                    b.Property<string>("ExamPartCode")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("检查部位编码");

                    b.Property<string>("ExtraProperties")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ExtraProperties");

                    b.Property<bool>("HasReport")
                        .HasColumnType("bit")
                        .HasComment("报告标识");

                    b.Property<string>("HospitalCode")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("HospitalName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("IsDeleted");

                    b.Property<bool>("IsEmergency")
                        .HasColumnType("bit")
                        .HasComment("是否紧急");

                    b.Property<bool?>("IsProHospitalUse")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("LastModificationTime");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("LastModifierId");

                    b.Property<string>("MedicalHistory")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)")
                        .HasComment("简要病史");

                    b.Property<string>("Position")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("位置");

                    b.Property<string>("PositionCode")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("位置编码");

                    b.Property<Guid>("RecipeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ReportDT")
                        .HasMaxLength(20)
                        .HasColumnType("datetime2")
                        .HasComment("出报告时间");

                    b.Property<string>("ReportDoctor")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("确认报告医生");

                    b.Property<string>("ReportDoctorCode")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("确认报告医生编码");

                    b.HasKey("Id");

                    b.HasIndex("RecipeId");

                    b.ToTable("NursingPacs");

                    b
                        .HasComment("检查项");
                });

            modelBuilder.Entity("YiJian.Nursing.PacsTarget", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)")
                        .HasComment("数量");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("小项编码");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)")
                        .HasColumnName("ConcurrencyStamp");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreationTime");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CreatorId");

                    b.Property<Guid?>("DeleterId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("DeleterId");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("DeletionTime");

                    b.Property<string>("ExtraProperties")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ExtraProperties");

                    b.Property<string>("HospitalCode")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("HospitalName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Insurance")
                        .HasColumnType("int")
                        .HasComment("医保目录：0-自费项目1-医保项目(甲、乙)");

                    b.Property<string>("InsuranceCode")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("医保目录编码");

                    b.Property<string>("InsuranceDescription")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("医保目录描述");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("IsDeleted");

                    b.Property<bool?>("IsProHospitalUse")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("LastModificationTime");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("LastModifierId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasComment("小项名称");

                    b.Property<Guid>("PacsId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("项目标识-外键");

                    b.Property<decimal>("Price")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)")
                        .HasComment("单价");

                    b.Property<Guid>("TargetId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("小项标识");

                    b.Property<decimal>("TotalFee")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)")
                        .HasComment("总费用");

                    b.Property<string>("Unit")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("单位");

                    b.HasKey("Id");

                    b.HasIndex("PacsId");

                    b.ToTable("NursingPacsTargets");

                    b
                        .HasComment("检查小项");
                });

            modelBuilder.Entity("YiJian.Nursing.Prescribe", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("ActualDays")
                        .HasMaxLength(20)
                        .HasColumnType("int")
                        .HasComment("实际天数");

                    b.Property<int>("Amount")
                        .HasMaxLength(20)
                        .HasColumnType("int")
                        .HasComment("领量");

                    b.Property<string>("BatchNo")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("批次号");

                    b.Property<string>("BigPackUnit")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("包装单位");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)")
                        .HasColumnName("ConcurrencyStamp");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreationTime");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CreatorId");

                    b.Property<Guid?>("DeleterId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("DeleterId");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("DeletionTime");

                    b.Property<decimal>("DosageQty")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)")
                        .HasComment("每次计量");

                    b.Property<string>("DosageUnit")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("剂量单位");

                    b.Property<string>("ExecTime")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("执行时间：例如13:00.");

                    b.Property<DateTime?>("ExpirDate")
                        .HasColumnType("datetime2")
                        .HasComment("失效期");

                    b.Property<string>("ExtraProperties")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ExtraProperties");

                    b.Property<string>("Factory")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("厂家");

                    b.Property<string>("FactoryCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("厂家代码");

                    b.Property<string>("Frequency")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("频次");

                    b.Property<string>("FrequencyCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("频次码");

                    b.Property<int?>("FrequencyRatio")
                        .HasColumnType("int")
                        .HasComment("频次执行系数");

                    b.Property<string>("HospitalCode")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("HospitalName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool?>("IsAdaptationDisease")
                        .HasColumnType("bit")
                        .HasComment("是否医保适应症");

                    b.Property<bool>("IsAmendedMark")
                        .HasColumnType("bit")
                        .HasComment("是否抢救后补：0-非抢救后补1-抢救后补");

                    b.Property<bool?>("IsBindingTreat")
                        .HasColumnType("bit")
                        .HasComment("用于判断关联耗材是否手动删除");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("IsDeleted");

                    b.Property<bool>("IsOutDrug")
                        .HasColumnType("bit")
                        .HasComment("是否自备药：0-非自备药1-自备药");

                    b.Property<bool?>("IsProHospitalUse")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSkinTest")
                        .HasMaxLength(20)
                        .HasColumnType("bit")
                        .HasComment("是否皮试 0 不需要皮试 1 需要皮试");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("LastModificationTime");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("LastModifierId");

                    b.Property<int>("LongDays")
                        .HasMaxLength(20)
                        .HasColumnType("int")
                        .HasComment("开药天数");

                    b.Property<decimal?>("MaterialPrice")
                        .HasMaxLength(20)
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)")
                        .HasComment("耗材金额");

                    b.Property<string>("Pharmacy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("药房");

                    b.Property<string>("PharmacyCode")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("药房编码");

                    b.Property<string>("Position")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("位置");

                    b.Property<string>("PositionCode")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("位置编码");

                    b.Property<string>("Property")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("药物属性：西药、中药、西药制剂、中药制剂");

                    b.Property<decimal?>("QtyPerTime")
                        .HasMaxLength(20)
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)")
                        .HasComment("每次用量");

                    b.Property<Guid>("RecipeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("SkinTestResult")
                        .HasMaxLength(20)
                        .HasColumnType("bit")
                        .HasComment("皮试结果 0-阴性 1-阳性");

                    b.Property<string>("Specification")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("包装规格");

                    b.Property<string>("Speed")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("滴速");

                    b.Property<int>("ToxicProperty")
                        .HasColumnType("int")
                        .HasComment("药理等级：毒、麻、精一、精二");

                    b.Property<string>("ToxicPropertyCode")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("药理等级编码：毒、麻、精一、精二");

                    b.Property<string>("ToxicPropertyDescription")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("药理等级描述：毒、麻、精一、精二");

                    b.Property<string>("Unit")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)")
                        .HasComment("领量单位");

                    b.Property<string>("Usage")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("用法");

                    b.Property<string>("UsageCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("用法编码");

                    b.HasKey("Id");

                    b.HasIndex("RecipeId");

                    b.ToTable("NursingPrescribes");

                    b
                        .HasComment("处方业务");
                });

            modelBuilder.Entity("YiJian.Nursing.Recipe", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ApplyDept")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("申请科室");

                    b.Property<string>("ApplyDeptCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("申请科室编码");

                    b.Property<string>("ApplyDoctor")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("申请医生");

                    b.Property<string>("ApplyDoctorCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("申请医生编码");

                    b.Property<DateTime>("ApplyTime")
                        .HasColumnType("datetime2")
                        .HasComment("开立时间");

                    b.Property<int>("BussinessCatalog")
                        .HasColumnType("int")
                        .HasComment("业务类型");

                    b.Property<string>("BussinessCatalogCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("业务类型编码");

                    b.Property<string>("BussinessCatalogDescription")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("业务类型描述");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)")
                        .HasColumnName("ConcurrencyStamp");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreationTime");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CreatorId");

                    b.Property<Guid?>("DeleterId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("DeleterId");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("DeletionTime");

                    b.Property<string>("Diagnosis")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)")
                        .HasComment("临床诊断（冗余设计）");

                    b.Property<string>("ExecDept")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("执行科室");

                    b.Property<string>("ExecDeptCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("执行科室编码");

                    b.Property<string>("ExecStatus")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("执行状态");

                    b.Property<string>("ExecStatusCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("执行状态码");

                    b.Property<string>("ExtraProperties")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ExtraProperties");

                    b.Property<string>("HisOrderNo")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("HIS医嘱号");

                    b.Property<string>("HospitalCode")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("HospitalName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Insurance")
                        .HasColumnType("int")
                        .HasComment("医保目录：0-自费项目1-医保项目(甲、乙)");

                    b.Property<string>("InsuranceCode")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("医保目录编码");

                    b.Property<string>("InsuranceDescription")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("医保目录描述");

                    b.Property<bool>("IsBackTracking")
                        .HasColumnType("bit")
                        .HasComment("是否补录");

                    b.Property<bool?>("IsChronicDisease")
                        .HasColumnType("bit")
                        .HasComment("慢性病标识");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("IsDeleted");

                    b.Property<bool?>("IsProHospitalUse")
                        .HasColumnType("bit");

                    b.Property<bool>("IsReceiptPrinted")
                        .HasColumnType("bit")
                        .HasComment("申请单打印标识");

                    b.Property<bool>("IsRecipePrinted")
                        .HasColumnType("bit")
                        .HasComment("医嘱单打印标识");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("LastModificationTime");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("LastModifierId");

                    b.Property<Guid>("PIID")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("病人标识");

                    b.Property<int>("PayType")
                        .HasColumnType("int")
                        .HasComment("付费类型  0 自费项目 1 医保项目");

                    b.Property<string>("PayTypeCode")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("付费类型编码");

                    b.Property<string>("PayTypeDescrition")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("付费类型描述：自费项目 医保项目");

                    b.Property<string>("PrescribeType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("医嘱类型：字典、临嘱、长嘱、出院带药");

                    b.Property<string>("PrescribeTypeCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("医嘱类型编码");

                    b.Property<string>("PrescriptionNo")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("处方号");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)")
                        .HasComment("单价");

                    b.Property<int>("RePrintReceiptCount")
                        .HasColumnType("int")
                        .HasComment("补打次数 默认0次");

                    b.Property<DateTime?>("RePrintReceiptTime")
                        .HasColumnType("datetime2")
                        .HasComment("补打时间");

                    b.Property<string>("RePrintReceiptor")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("补打印人");

                    b.Property<string>("RecipeCategory")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("医嘱项目分类 (药物，检查，检验，治疗，护理，膳食，麻醉，手术，会诊，耗材，其他，嘱托)");

                    b.Property<string>("RecipeCategoryCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("医嘱项目分类编码 (药物，检查，检验，治疗，护理，膳食，麻醉，手术，会诊，耗材，其他，嘱托)");

                    b.Property<string>("RecipeCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("编码");

                    b.Property<string>("RecipeFeeStatus")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("收费状态");

                    b.Property<string>("RecipeFeeStatusCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("收费状态码");

                    b.Property<string>("RecipeName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasComment("名称");

                    b.Property<string>("RecipeNo")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("医嘱号");

                    b.Property<int>("RecipeSubNo")
                        .HasColumnType("int")
                        .HasComment("医嘱子号：药物为1.2.3...其它项目取默认值");

                    b.Property<string>("Remarks")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasComment("医嘱说明");

                    b.Property<string>("SignCert")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasComment("签名证书");

                    b.Property<string>("SignFlow")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)")
                        .HasComment(" Base64 编码格式的签章图片");

                    b.Property<string>("SignValue")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasComment("签名值");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("StatusCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("状态编码");

                    b.Property<string>("StatusDescription")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("状态描述");

                    b.Property<DateTime?>("StopDateTime")
                        .HasMaxLength(20)
                        .HasColumnType("datetime2")
                        .HasComment("停嘱时间");

                    b.Property<string>("StopDoctor")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("停嘱医生");

                    b.Property<string>("StopDoctorCode")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("停嘱医生代码");

                    b.Property<string>("TimestampValue")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasComment("时间戳值");

                    b.Property<decimal>("TotalFee")
                        .HasColumnType("decimal(18,2)")
                        .HasComment("总费用");

                    b.Property<string>("Trainee")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("管培生");

                    b.Property<string>("TraineeCode")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("管培生代码");

                    b.HasKey("Id");

                    b.HasIndex("RecipeCode");

                    b.HasIndex("RecipeName");

                    b.ToTable("NursingRecipe");
                });

            modelBuilder.Entity("YiJian.Nursing.Treat", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Amount")
                        .HasColumnType("int")
                        .HasComment("用量");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)")
                        .HasColumnName("ConcurrencyStamp");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreationTime");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CreatorId");

                    b.Property<Guid?>("DeleterId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("DeleterId");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("DeletionTime");

                    b.Property<string>("ExtraProperties")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ExtraProperties");

                    b.Property<string>("HospitalCode")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("HospitalName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("IsDeleted");

                    b.Property<bool?>("IsProHospitalUse")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("LastModificationTime");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("LastModifierId");

                    b.Property<Guid>("RecipeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Unit")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("用量单位");

                    b.HasKey("Id");

                    b.HasIndex("RecipeId");

                    b.ToTable("NursingTreats");

                    b
                        .HasComment("诊疗项");
                });

            modelBuilder.Entity("YiJian.Nursing.IllnessObserveInput", b =>
                {
                    b.HasOne("YiJian.Nursing.IllnessObserveMain", null)
                        .WithOne("IllnessObserveInput")
                        .HasForeignKey("YiJian.Nursing.IllnessObserveInput", "IllnessObserveMainId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("YiJian.Nursing.IllnessObserveOther", b =>
                {
                    b.HasOne("YiJian.Nursing.IllnessObserveMain", null)
                        .WithOne("IllnessObserveOther")
                        .HasForeignKey("YiJian.Nursing.IllnessObserveOther", "IllnessObserveMainId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("YiJian.Nursing.IllnessObserveOutput", b =>
                {
                    b.HasOne("YiJian.Nursing.IllnessObserveMain", null)
                        .WithOne("IllnessObserveOutput")
                        .HasForeignKey("YiJian.Nursing.IllnessObserveOutput", "IllnessObserveMainId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("YiJian.Nursing.Lis", b =>
                {
                    b.HasOne("YiJian.Nursing.Recipe", "Recipe")
                        .WithMany()
                        .HasForeignKey("RecipeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Recipe");
                });

            modelBuilder.Entity("YiJian.Nursing.LisTarget", b =>
                {
                    b.HasOne("YiJian.Nursing.Lis", null)
                        .WithMany("Targets")
                        .HasForeignKey("LisId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("YiJian.Nursing.Pacs", b =>
                {
                    b.HasOne("YiJian.Nursing.Recipe", "Recipe")
                        .WithMany()
                        .HasForeignKey("RecipeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Recipe");
                });

            modelBuilder.Entity("YiJian.Nursing.PacsTarget", b =>
                {
                    b.HasOne("YiJian.Nursing.Pacs", null)
                        .WithMany("Targets")
                        .HasForeignKey("PacsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("YiJian.Nursing.Prescribe", b =>
                {
                    b.HasOne("YiJian.Nursing.Recipe", "Recipe")
                        .WithMany()
                        .HasForeignKey("RecipeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Recipe");
                });

            modelBuilder.Entity("YiJian.Nursing.Treat", b =>
                {
                    b.HasOne("YiJian.Nursing.Recipe", "Recipe")
                        .WithMany()
                        .HasForeignKey("RecipeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Recipe");
                });

            modelBuilder.Entity("YiJian.Nursing.IllnessObserveMain", b =>
                {
                    b.Navigation("IllnessObserveInput");

                    b.Navigation("IllnessObserveOther");

                    b.Navigation("IllnessObserveOutput");
                });

            modelBuilder.Entity("YiJian.Nursing.Lis", b =>
                {
                    b.Navigation("Targets");
                });

            modelBuilder.Entity("YiJian.Nursing.Pacs", b =>
                {
                    b.Navigation("Targets");
                });
#pragma warning restore 612, 618
        }
    }
}
